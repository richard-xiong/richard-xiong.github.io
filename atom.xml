<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XingServer</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://richard-xiong.github.io/"/>
  <updated>2021-01-06T09:05:14.431Z</updated>
  <id>https://richard-xiong.github.io/</id>
  
  <author>
    <name>Richard</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mac init</title>
    <link href="https://richard-xiong.github.io/2021/01/06/mac-init/"/>
    <id>https://richard-xiong.github.io/2021/01/06/mac-init/</id>
    <published>2021-01-05T17:11:03.000Z</published>
    <updated>2021-01-06T09:05:14.431Z</updated>
    
    <content type="html"><![CDATA[<h3 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h3><ul><li><p>goland</p></li><li><p>intelij </p></li><li><p>iterm</p></li><li><p>docker-desktop</p></li></ul><h3 id="客户端插件"><a href="#客户端插件" class="headerlink" title="客户端插件"></a>客户端插件</h3><ul><li><p>mysql</p></li><li><p>redis</p></li><li><p>git</p></li><li><p>jenv</p></li></ul><h3 id="jdk-下载"><a href="#jdk-下载" class="headerlink" title="jdk 下载"></a>jdk 下载</h3><ul><li><p>jdk 1.8</p></li><li><p>logstash</p><ul><li><p>filebeat</p></li><li><p>elasticsearch  <a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</a></p></li><li><p>kibana</p></li><li><p>go 1.8</p></li><li><p>python 3.7</p></li></ul></li></ul><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li><pre><code class="shell">alias ll=&#39;ls -l&#39;&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ git 自动补全&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ bash_profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  + &amp;#96;&amp;#96;&amp;#96;bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mfxing  cat ~&amp;#x2F;.bash_profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if [ -f ~&amp;#x2F;.bashrc ] ; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ~&amp;#x2F;.bashrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # iterm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CLICOLOR&amp;#x3D;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LSCOLORS&amp;#x3D;gxfxcxdxbxegedabagacad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export TERM&amp;#x3D;xterm-color&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export M2_HOME&amp;#x3D;&amp;#x2F;Users&amp;#x2F;mengfanxing_g&amp;#x2F;software&amp;#x2F;apache-maven-3.5.4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export PATH&amp;#x3D;$PATH:$M2_HOME&amp;#x2F;bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ##go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export GOPATH&amp;#x3D;&amp;#x2F;Users&amp;#x2F;mengfanxing_g&amp;#x2F;godev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export GOBIN&amp;#x3D;$GOPATH&amp;#x2F;bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export PATH&amp;#x3D;$PATH:$GOBIN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #export GOPROXY&amp;#x3D;https:&amp;#x2F;&amp;#x2F;goproxy.io,direct&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export PATH&amp;#x3D;$PATH:$GOROOT&amp;#x2F;bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export GOSUMDB&amp;#x3D;off&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export GO111MODULE&amp;#x3D;on&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #export GOPROXY&amp;#x3D;http:&amp;#x2F;&amp;#x2F;10.120.1.209:3000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ##mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export PATH&amp;#x3D;$&amp;#123;PATH&amp;#125;:&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;mysql&amp;#x2F;bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export PATH&amp;#x3D;&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;mongodb&amp;#x2F;bin:$PATH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export PATH&amp;#x3D;&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;Cellar:$PATH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export IME_SCRIPTS_PATH&amp;#x3D;&amp;#x2F;Users&amp;#x2F;mengfanxing_g&amp;#x2F;duserver&amp;#x2F;ime-theme-pkg&amp;#x2F;src&amp;#x2F;main&amp;#x2F;resources&amp;#x2F;scripts&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export PATH&amp;#x3D;$PATH:$IME_SCRIPTS_PATH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export PATH&amp;#x3D;&amp;quot;$HOME&amp;#x2F;.jenv&amp;#x2F;bin:$PATH&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export PATH&amp;#x3D;$PATH:&amp;#x2F;Applications&amp;#x2F;Postgres.app&amp;#x2F;Contents&amp;#x2F;Versions&amp;#x2F;11&amp;#x2F;bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # Setting PATH for android-sdk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export ANDROID_SDK_ROOT&amp;#x3D;&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;share&amp;#x2F;android-sdk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export ANDROID_HOME&amp;#x3D;&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;share&amp;#x2F;android-sdk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export PATH&amp;#x3D;&amp;quot;$&amp;#123;PATH&amp;#125;:$&amp;#123;ANDROID_SDK_ROOT&amp;#125;&amp;#x2F;tools:$&amp;#123;ANDROID_SDK_ROOT&amp;#125;&amp;#x2F;platform-tools&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export PATH&amp;#x3D;&amp;quot;$&amp;#123;PATH&amp;#125;:&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;Cellar&amp;#x2F;gradle&amp;#x2F;5.2.1&amp;#x2F;bin&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #export PLAY_HOME&amp;#x3D;&amp;#x2F;Applications&amp;#x2F;play-1.2.4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export PLAY_HOME&amp;#x3D;&amp;#x2F;Users&amp;#x2F;mengfanxing_g&amp;#x2F;tools&amp;#x2F;play-1.2.4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export PATH&amp;#x3D;$PATH:$PLAY_HOME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #eval &amp;quot;$(jenv init -)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #enables colorin the terminal bash shell export&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export CLICOLOR&amp;#x3D;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #setsup thecolor scheme for list export&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export LSCOLORS&amp;#x3D;gxfxcxdxbxegedabagacad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #sets up theprompt color (currently a green similar to linux terminal)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #export PS1&amp;#x3D;&amp;#39;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]\$&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #enables colorfor iTerm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export TERM&amp;#x3D;xterm-256color&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alias gcc&amp;#x3D;&amp;#39;gcc-8&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alias cc&amp;#x3D;&amp;#39;gcc-8&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alias g++&amp;#x3D;&amp;#39;g++-8&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alias c++&amp;#x3D;&amp;#39;c++-8&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export PATH&amp;#x3D;&amp;quot;&amp;#x2F;Users&amp;#x2F;mengfanxing_g&amp;#x2F;tools:$PATH&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export MICRO_REGISTRY&amp;#x3D;consul&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alias hwrelaybj1&amp;#x3D;&amp;#39;ssh work@10.49.1.180&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alias hwrelaybj4&amp;#x3D;&amp;#39;ssh work@119.3.170.35&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alias injumper&amp;#x3D;&amp;#39;ssh work@35.154.102.190&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alias hwhk&amp;#x3D;&amp;#39;ssh work@159.138.9.178&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alias sandboxjumper&amp;#x3D;&amp;#39;ssh work@35.160.18.159&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # java 1.6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # JAVA_HOME&amp;#x3D;&amp;#x2F;Library&amp;#x2F;Java&amp;#x2F;JavaVirtualMachines&amp;#x2F;1.6.0.jdk&amp;#x2F;Contents&amp;#x2F;Home&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # java 1.8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    JAVA_HOME&amp;#x3D;&amp;#x2F;Library&amp;#x2F;Java&amp;#x2F;JavaVirtualMachines&amp;#x2F;jdk1.8.0_172.jdk&amp;#x2F;Contents&amp;#x2F;Home&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #jdk15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #JAVA_HOME&amp;#x3D;&amp;#x2F;Library&amp;#x2F;Java&amp;#x2F;JavaVirtualMachines&amp;#x2F;jdk-15.0.1.jdk&amp;#x2F;Contents&amp;#x2F;Home&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PATH&amp;#x3D;$JAVA_HOME&amp;#x2F;bin:$PATH:.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #CLASSPATH&amp;#x3D;$JAVA_HOME&amp;#x2F;lib&amp;#x2F;tools.jar:$JAVA_HOME&amp;#x2F;lib&amp;#x2F;dt.jar:.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export JAVA_HOME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export PATH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    export CLASSPATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;+ bashrc  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;complete -C aws_completer aws&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias ll=&amp;#x27;ls -l&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;alias&lt;/span&gt; python=&lt;span class=&quot;string&quot;&gt;&amp;quot;/usr/local/Cellar/python/3.7.0/bin/python3.7&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias hwmysql=&amp;quot;mysql -h 10.48.1.125 -P 3306 -u root -pHua_xxx_111&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias hwredis=&amp;quot;redis-cli -h 10.49.1.109 -p6379 -c&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias python=&amp;quot;/usr/local/bin/python2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias login-relay=&amp;quot;ssh mengfanxing@13.251.183.70&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias redis-cli-dev=&amp;quot;redis-cli -h hkg02-dx-gc04.hkg02.baidu.com -p 8501 -c&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias redis-cli-sandbox=&amp;quot;redis-cli -h 10.29.10.14 -p 8700 -c&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias mysql-dev=&amp;quot;mysql -h hkg02-dx-gc04.hkg02.baidu.com -P 8306 -u dev -p&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias apjumper=&amp;#x27;ssh work@13.251.183.70&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias work-relay=&amp;quot;ssh mengfanxing@13.251.183.70&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias tencent-login=&amp;quot;ssh work@49.234.187.242&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias usjumper=&amp;#x27;ssh work@52.32.151.225&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias inputjumper=&amp;#x27;ssh ec2-user@35.154.102.190&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias rec01=&amp;#x27;ssh work@18.138.50.186&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias rec02=&amp;#x27;ssh work@18.138.52.92&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias huaweiJumper=&amp;#x27;ssh work@159.138.9.178&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias lezhuan=&amp;#x27;ssh work@10.49.3.168&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias hwrelaybj1=&amp;#x27;ssh work@10.49.1.180&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias sandbox=&amp;#x27;ssh work@35.160.18.159&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias sandboxk8s=&amp;#x27;ssh k8s@10.29.2.9&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function git_branch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  branch=&amp;quot;`git branch 2&amp;gt;/dev/null | grep &amp;quot;^\*&amp;quot; | sed -e &amp;quot;s/^\*\ //&amp;quot;`&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if [ &amp;quot;$&amp;#123;branch&amp;#125;&amp;quot; != &amp;quot;&amp;quot; ];then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if [ &amp;quot;$&amp;#123;branch&amp;#125;&amp;quot; = &amp;quot;(no branch)&amp;quot; ];then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          branch=&amp;quot;(`git rev-parse --short HEAD`...)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      echo &amp;quot; ($branch)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; PS1=&lt;span class=&quot;string&quot;&gt;&amp;#x27;\u@\h \[\033[01;36m\]\W\[\033[01;32m\]$(git_branch)\[\033[00m\] \$ &amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export LANG=&amp;#x27;UTC-8&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export LC_ALL=&amp;#x27;en_US.UTF-8&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export TERM=xterm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias sandbox=&amp;quot;ssh work@10.29.10.97&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias sandbox_apollo=&amp;quot;ssh work@10.29.0.236&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias sandbox_1=&amp;quot;ssh work@35.160.18.159&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li></ul><h4 id="es压测"><a href="#es压测" class="headerlink" title="es压测"></a>es压测</h4><ol><li><p>jvm 从cms改G1 看看性能，然后在改为jdk11 使用ZGC 看看性能</p></li><li><p>新机器需要调整相应配置 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/system-config.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/system-config.html</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &quot;ulimit -n 65535 &amp;&amp; exec su $LOGNAME&quot;</span><br><span class="line">sudo sh -c &quot;ulimit -u 4096 &amp;&amp; exec su $LOGNAME&quot;</span><br></pre></td></tr></table></figure></li></ol><p>pip install –upgrade “esrally==1.2.1”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;软件下载&quot;&gt;&lt;a href=&quot;#软件下载&quot; class=&quot;headerlink&quot; title=&quot;软件下载&quot;&gt;&lt;/a&gt;软件下载&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;goland&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;intelij &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ite
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>flink学习笔记六：Flink流处理APi</title>
    <link href="https://richard-xiong.github.io/2020/12/31/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9AFlink%E6%B5%81%E5%A4%84%E7%90%86APi/"/>
    <id>https://richard-xiong.github.io/2020/12/31/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9AFlink%E6%B5%81%E5%A4%84%E7%90%86APi/</id>
    <published>2020-12-30T16:04:19.000Z</published>
    <updated>2020-12-31T09:32:17.063Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Flink流处理APi"><a href="#Flink流处理APi" class="headerlink" title="Flink流处理APi"></a>Flink流处理APi</h3><ol><li><h4 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h4><ol><li><p><strong>getExecutionEnvironment</strong></p><p>创建一个执行环境，表示当前执行程序的上下文。 如果程序是独立调用的，则 此方法返回本地执行环境;如果从命令行客户端调用程序以提交到集群，则此方法 返回此集群的执行环境，也就是说，getExecutionEnvironment 会根据查询运行的方 式决定返回什么样的运行环境，是最常用的一种创建执行环境的方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val env: ExecutionEnvironment &#x3D; ExecutionEnvironment.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">val env &#x3D; StreamExecutionEnvironment.getExecutionEnvironment 如果没有设置并行度，会以 flink-conf.yaml 中的配置为准，默认是 1。</span><br></pre></td></tr></table></figure></li><li><p><strong>createLocalEnvironment</strong></p><p>返回本地执行环境，需要在调用时指定默认的并行度。</p><p>val env = StreamExecutionEnvironment.createLocalEnvironment(1)</p></li><li><p><strong>createRemoteEnvironment</strong></p><p>返回集群执行环境，将 Jar 提交到远程服务器。需要在调用时指定 JobManager</p><p>的 IP 和端口号，并指定要在集群中运行的 Jar 包。</p><p>val env = ExecutionEnvironment.createRemoteEnvironment(“jobmanage-hostname”, 6123,”YOURPATH//wordcount.jar”)</p></li></ol></li><li><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><ol><li>从集合读取数据</li><li>从文件读取数据</li><li>以 <strong>kafka</strong> 消息队列的数据作为来源</li><li>自定义 Source</li></ol></li><li><h4 id="Transform-转换算子"><a href="#Transform-转换算子" class="headerlink" title="Transform  转换算子"></a><strong>Transform</strong>  转换算子</h4><p>在Spark中，算子分为转换算子和行动算子，转换算子的作用可以通过算子方法的调用将一个RDD转换另外一个RDD，Flink中也存在同样的操作，可以将一个数据流转换为其他的数据流。</p><p><strong>转换过程中，数据流的类型也会发生变化，那么到底Flink支持什么样的数据类型呢，其实我们常用的数据类型，Flink都是支持的。比如：Long, String, Integer, Int, 元组，样例类，List, Map等。</strong></p><ol><li><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><ol><li>映射：将数据流中的数据进行转换, 形成新的数据流，消费一个元素并产出一个元素</li><li>参数：Scala匿名函数或MapFunction</li><li>返回：DataStream</li></ol></li><li><h5 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h5><ol><li><p>扁平映射：将数据流中的整体拆分成一个一个的个体使用，消费一个元素并产生零到多个元素</p></li><li><p>参数：Scala匿名函数或FlatMapFunction</p></li><li><p>返回：DataStream</p><p><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9AFlink%E6%B5%81%E5%A4%84%E7%90%86APi/java6-1598922850.png" alt="Flink从入门到入土"></p></li></ol></li><li><h5 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h5><ol><li>过滤：根据指定的规则将满足条件（true）的数据保留，不满足条件(false)的数据丢弃</li><li>参数：Scala匿名函数或FilterFunction</li><li>返回：DataStream</li></ol></li><li><h5 id="KeyBy"><a href="#KeyBy" class="headerlink" title="KeyBy"></a>KeyBy</h5><p>​    在Spark中有一个GroupBy的算子，用于根据指定的规则将数据进行分组，在flink中也有类似的功能，那就是keyBy，根据指定的key对数据进行分流</p><ol><li>分流：根据指定的Key将元素发送到不同的分区，相同的Key会被分到一个分区（这里分区指的就是下游算子多个并行节点的其中一个）。keyBy()是通过哈希来分区的</li></ol><p><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9AFlink%E6%B5%81%E5%A4%84%E7%90%86APi/java5-1598922850.png" alt="Flink从入门到入土"></p><ol start="2"><li><p>参数：Scala匿名函数或POJO属性或元组索引，不能使用数组</p></li><li><p>返回：KeyedStream</p><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9AFlink%E6%B5%81%E5%A4%84%E7%90%86APi/java0-1598922850.png" alt="Flink从入门到入土"  /></li></ol></li><li><h5 id="滚动聚合算子Rolling-Aggregation"><a href="#滚动聚合算子Rolling-Aggregation" class="headerlink" title="滚动聚合算子Rolling Aggregation"></a>滚动聚合算子Rolling Aggregation</h5><ol><li><p>这些算子可以针对KeyedStream的每一个支流做聚合。执行完成后，会将聚合的结果合成一个流返回，所以结果都是DataStream</p><p>sum()</p><p><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9AFlink%E6%B5%81%E5%A4%84%E7%90%86APi/java5-1598922850-3-20201231162508066.png" alt="Flink从入门到入土"></p><p>min()</p><p><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9AFlink%E6%B5%81%E5%A4%84%E7%90%86APi/java5-1598922851.png" alt="Flink从入门到入土"></p><p>max()</p><p><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9AFlink%E6%B5%81%E5%A4%84%E7%90%86APi/java6-1598922851.png" alt="Flink从入门到入土"></p></li><li><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h5><ol><li><p>一个分组数据流的聚合操作，合并当前的元素和上次聚合的结果，产生一个新的值，返回的流中包含每一次聚合的结果，而不是只返回最后一次聚合的最终结果。</p><p><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9AFlink%E6%B5%81%E5%A4%84%E7%90%86APi/java6-1598922851-1.png" alt="Flink从入门到入土">    </p></li></ol></li><li><h5 id="Split-和Select"><a href="#Split-和Select" class="headerlink" title="Split 和Select"></a>Split 和Select</h5><ol><li><p>在某些情况下，我们需要将数据流根据某些特征拆分成两个或者多个数据流，给不同数据流增加标记以便于从流中取出。</p><p><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9AFlink%E6%B5%81%E5%A4%84%E7%90%86APi/java10-1598922850-1.png" alt="Flink从入门到入土"></p></li><li><p>将数据流进行切分后，如何从流中将不同的标记取出呢，这时就需要使用select算子了。</p><p><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9AFlink%E6%B5%81%E5%A4%84%E7%90%86APi/java8-1598922850.png" alt="Flink从入门到入土"></p></li></ol></li><li><h5 id="Connect和CoMap"><a href="#Connect和CoMap" class="headerlink" title="Connect和CoMap"></a>Connect和CoMap</h5><ol><li><p><strong>DataStream,DataStream</strong> → <strong>ConnectedStreams</strong>:连接两个保持他们类型的数</p><p>据流，两个数据流被 Connect 之后，只是被放在了一个同一个流中，内部依然保持 各自的数据和形式不发生任何变化，两个流相互独立。</p><p><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9AFlink%E6%B5%81%E5%A4%84%E7%90%86APi/image-20201231165542283.png" alt="image-20201231165542283"></p></li><li><p>在某些情况下，我们需要将两个不同来源的数据流进行连接，实现数据匹配，比如订单支付和第三方交易信息，这两个信息的数据就来自于不同数据源，连接后，将订单支付和第三方交易信息进行对账，此时，才能算真正的支付完成。</p><p>Flink中的connect算子可以连接两个保持他们类型的数据流，两个数据流被Connect之后，只是被放在了一个同一个流中，内部依然保持各自的数据和形式不发生任何变化，两个流相互独立。</p><p>​    <img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9AFlink%E6%B5%81%E5%A4%84%E7%90%86APi/java9-1598922850-1-20201231165603345.png" alt="Flink从入门到入土"></p></li></ol></li><li><h5 id="union"><a href="#union" class="headerlink" title="union"></a>union</h5><ol><li><p>对两个或者两个以上的DataStream进行union操作，产生一个包含所有DataStream元素的新DataStream</p><p><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9AFlink%E6%B5%81%E5%A4%84%E7%90%86APi/java3-1598922850.png" alt="Flink从入门到入土"></p></li><li><p>connect与 union 区别：</p><ol><li>union之前两个流的类型必须是一样，connect可以不一样</li><li>connect只能操作两个流，union可以操作多个。</li></ol></li></ol></li></ol></li></ol></li><li><h4 id="实现-UDF-函数——更细粒度的控制流"><a href="#实现-UDF-函数——更细粒度的控制流" class="headerlink" title="实现 UDF 函数——更细粒度的控制流"></a>实现 UDF 函数——更细粒度的控制流</h4><ol><li><p>函数类(<strong>Function Classes</strong>)Flink 暴露了所有 udf 函数的接口(实现方式为接口或者抽象类)。例如 MapFunction, FilterFunction, ProcessFunction 等等。</p></li><li><p>匿名函数(<strong>Lambda Functions</strong>)</p></li><li><p>富函数(<strong>Rich Functions</strong>)</p><p>“富函数”是 DataStream API 提供的一个函数类的接口，所有 Flink 函数类都 有其 Rich 版本。它与常规函数的不同在于，可以获取运行环境的上下文，并拥有一 些生命周期方法，所以可以实现更复杂的功能。</p><ul><li>RichMapFunction</li><li>RichFlatMapFunction</li><li>RichFilterFunction</li><li>…​</li><li>Rich Function 有一个生命周期的概念。典型的生命周期方法有:<ul><li>open()方法是 rich function 的初始化方法，当一个算子例如 map 或者 filter被调用之前 open()会被调用。</li><li>close()方法是生命周期中的最后一个调用的方法，做一些清理工作。</li><li>getRuntimeContext()方法提供了函数的 RuntimeContext 的一些信息，例如函</li></ul></li></ul><p>数执行的并行度，任务的名字，以及 state 状态</p></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Flink流处理APi&quot;&gt;&lt;a href=&quot;#Flink流处理APi&quot; class=&quot;headerlink&quot; title=&quot;Flink流处理APi&quot;&gt;&lt;/a&gt;Flink流处理APi&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;h4 id=&quot;Environment&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>flink学习笔记五：运行时架构</title>
    <link href="https://richard-xiong.github.io/2020/12/29/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9E%B6%E6%9E%84/"/>
    <id>https://richard-xiong.github.io/2020/12/29/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9E%B6%E6%9E%84/</id>
    <published>2020-12-29T14:54:34.000Z</published>
    <updated>2020-12-30T08:03:20.910Z</updated>
    
    <content type="html"><![CDATA[<h3 id="运行时架构"><a href="#运行时架构" class="headerlink" title="运行时架构"></a>运行时架构</h3><ol><li><h4 id="Flink运行时组件"><a href="#Flink运行时组件" class="headerlink" title="Flink运行时组件"></a>Flink运行时组件</h4><ol><li><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9E%B6%E6%9E%84/image-20201230142923266.png" alt="image-20201230142923266" style="zoom:50%;" /></li></ol></li><li><h4 id="任务提交流程"><a href="#任务提交流程" class="headerlink" title="任务提交流程"></a>任务提交流程</h4><ol><li><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9E%B6%E6%9E%84/image-20201230144136573.png" alt="image-20201230144136573"></li></ol></li><li><h4 id="任务调度原理"><a href="#任务调度原理" class="headerlink" title="任务调度原理"></a>任务调度原理</h4><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9E%B6%E6%9E%84/image-20201230145253536.png" alt="image-20201230145253536" style="zoom: 33%;" /></li></ol><p><strong>是否合并任务链的小技巧：</strong></p><ol><li>​    disableChaining() 取消合并</li><li>.startNewCHain() 开启一个新的任务链  </li><li>.slotSharingSolt(“name”)    独享一个slot </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;运行时架构&quot;&gt;&lt;a href=&quot;#运行时架构&quot; class=&quot;headerlink&quot; title=&quot;运行时架构&quot;&gt;&lt;/a&gt;运行时架构&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;h4 id=&quot;Flink运行时组件&quot;&gt;&lt;a href=&quot;#Flink运行时组件&quot; class=&quot;hea
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>flink学习笔记三：快速上手</title>
    <link href="https://richard-xiong.github.io/2020/12/28/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%9A%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>https://richard-xiong.github.io/2020/12/28/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%9A%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</id>
    <published>2020-12-28T15:34:10.000Z</published>
    <updated>2020-12-28T13:31:41.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><ol><li><p><strong>创建一个pom工程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  ~ Copyright (C) 2020 Baidu, Inc. All Rights Reserved.</span><br><span class="line">  --&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.richard.flink&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;FlinkTutorial&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.flink&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;flink-scala_2.12&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.10.1&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.flink&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;flink-streaming-scala_2.12&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.10.1&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line"></span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;net.alchim31.maven&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;scala-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;3.4.6&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;!-- 声明绑定到 maven 的 compile 阶段 --&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;compile&lt;&#x2F;goal&gt;</span><br><span class="line">                        &lt;&#x2F;goals&gt;</span><br><span class="line">                    &lt;&#x2F;execution&gt;</span><br><span class="line">                &lt;&#x2F;executions&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-assembly-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;3.0.0&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;descriptorRefs&gt;</span><br><span class="line">                        &lt;descriptorRef&gt;jar-with-dependencies&lt;&#x2F;descriptorRef&gt;</span><br><span class="line">                    &lt;&#x2F;descriptorRefs&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;make-assembly&lt;&#x2F;id&gt;</span><br><span class="line">                        &lt;phase&gt;package&lt;&#x2F;phase&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;single&lt;&#x2F;goal&gt;</span><br><span class="line">                        &lt;&#x2F;goals&gt;</span><br><span class="line">                    &lt;&#x2F;execution&gt;</span><br><span class="line">                &lt;&#x2F;executions&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写一个批处理程序 wordCount</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.scala._</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2020 Baidu, Inc. All Rights Reserved.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建执行环境</span></span><br><span class="line">    <span class="keyword">val</span> env = <span class="type">ExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    <span class="comment">// 从文件中读取数据</span></span><br><span class="line">    <span class="keyword">val</span> inputPath = <span class="string">&quot;/Users/mengfanxing_g/duserver/FlinkTutorial/src/main/resources/hello.txt&quot;</span></span><br><span class="line">    <span class="keyword">val</span> inputDS: <span class="type">DataSet</span>[<span class="type">String</span>] = env.readTextFile(inputPath)</span><br><span class="line">    <span class="comment">// 分词之后，对单词进行 groupby 分组，然后用 sum 进行聚合</span></span><br><span class="line">    <span class="keyword">val</span> wordCountDS: <span class="type">AggregateDataSet</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = inputDS.flatMap(_.split(<span class="string">&quot; &quot;</span>)).map((_, <span class="number">1</span>)).groupBy(<span class="number">0</span>).sum(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 打印输出</span></span><br><span class="line">    wordCountDS.print()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写hello的内容</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">scala</span><br><span class="line">hello Flink</span><br><span class="line">How are you</span><br><span class="line">I fine thank you</span><br><span class="line">And you</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>运行输出结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">(How,1)</span><br><span class="line">(I,1)</span><br><span class="line">(are,1)</span><br><span class="line">(scala,1)</span><br><span class="line">(thank,1)</span><br><span class="line">(you,3)</span><br><span class="line">(And,1)</span><br><span class="line">(fine,1)</span><br><span class="line">(Flink,1)</span><br><span class="line">(hello,2)</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>编写一个流处理程序 StreamWordCount</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.utils.<span class="type">ParameterTool</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2020 Baidu, Inc. All Rights Reserved.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">StreamWordCount</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从外部命令获取参数</span></span><br><span class="line">    <span class="keyword">val</span> params: <span class="type">ParameterTool</span> = <span class="type">ParameterTool</span>.fromArgs(args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> host :<span class="type">String</span> = params.get(<span class="string">&quot;host&quot;</span>)</span><br><span class="line"></span><br><span class="line">    println(host)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> port :<span class="type">Int</span> = params.getInt(<span class="string">&quot;port&quot;</span>)</span><br><span class="line">    println(port)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建流处理环境</span></span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收socket 文本流</span></span><br><span class="line">    <span class="keyword">val</span> textDstream:<span class="type">DataStream</span>[<span class="type">String</span>] = env.socketTextStream(host,port)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// flatMap 和 Map 需要引用的隐式转换</span></span><br><span class="line">    <span class="keyword">val</span> dataStream: <span class="type">DataStream</span>[(<span class="type">String</span>,<span class="type">Int</span>)] = textDstream</span><br><span class="line">      .flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .filter(_.nonEmpty)</span><br><span class="line">      .map((_,<span class="number">1</span>))</span><br><span class="line">      .keyBy(<span class="number">0</span>)</span><br><span class="line">      .sum(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    dataStream.print()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动executor ， 执行任务</span></span><br><span class="line">    env.execute(<span class="string">&quot;socket stream word count&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑idea的Program arguments:  –host localhost –port 7777</p></li><li><p>启动nc </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mfxing  nc -lk 7777</span><br><span class="line">hello Flink</span><br><span class="line">hello Scala</span><br></pre></td></tr></table></figure><p>程序输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">SLF4J: See http:&#x2F;&#x2F;www.slf4j.org&#x2F;codes.html#StaticLoggerBinder for further details.</span><br><span class="line">2&gt; (hello,1)</span><br><span class="line">4&gt; (Flink,1)</span><br><span class="line">4&gt; (Scala,1)</span><br><span class="line">2&gt; (hello,2)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;快速上手&quot;&gt;&lt;a href=&quot;#快速上手&quot; class=&quot;headerlink&quot; title=&quot;快速上手&quot;&gt;&lt;/a&gt;快速上手&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;创建一个pom工程&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>flink学习笔记二：Flink简介</title>
    <link href="https://richard-xiong.github.io/2020/12/28/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9AFlink%E7%AE%80%E4%BB%8B/"/>
    <id>https://richard-xiong.github.io/2020/12/28/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9AFlink%E7%AE%80%E4%BB%8B/</id>
    <published>2020-12-27T19:28:15.000Z</published>
    <updated>2020-12-28T07:24:34.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h3><ol><li><h4 id="Flink是什么"><a href="#Flink是什么" class="headerlink" title="Flink是什么"></a>Flink是什么</h4><ol><li>Apache Flink 是一个框架和分布式处理引擎，用于对无界和有界数据流进行有 状态计算。Flink 被设计在所有常见的集群环境中运行，以内存执行速度和任意规模 来执行计算。</li><li>Flink 项目的理念是:“Apache Flink 是为分布式、高性能、随时可用以及准确的流处理应用程序打造的开源流处理框架”。</li></ol></li><li><h4 id="为什么要用Flink"><a href="#为什么要用Flink" class="headerlink" title="为什么要用Flink"></a>为什么要用Flink</h4><ol><li>流数据更真实的反应我们的生活方式</li><li>传统的数据框架是基于有限的数据集的</li><li>我们的目标<ol><li>低延迟</li><li>高吞吐</li><li>结果的准确性和良好的容错性</li></ol></li><li>哪些行业需要处理流数据<ol><li>电商行业和市场营销<ol><li>数据报表、广告投放、业务流程需要</li></ol></li><li>物联网（IOT）<ol><li>传感器实时数据采集和显示、实时报警、交通运输业</li></ol></li><li>电信业<ol><li>基站流量调配</li></ol></li><li>银行和金融业<ol><li>实时结算和通知推送，实时检测和异常行为 </li></ol></li></ol></li></ol><p>ps: gps的信息就是流式数据，金融中的交易数据，服务器的日志</p></li><li><h4 id="流处理的发展和转变"><a href="#流处理的发展和转变" class="headerlink" title="流处理的发展和转变"></a>流处理的发展和转变</h4><ol><li>传统数据处理架构<ol><li><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9AFlink%E7%AE%80%E4%BB%8B/image-20201228144234884.png" alt="image-20201228144234884" style="zoom:50%;" /><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9AFlink%E7%AE%80%E4%BB%8B/image-20201228144600428.png" alt="image-20201228144600428"></li><li><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9AFlink%E7%AE%80%E4%BB%8B/image-20201228144624819.png" alt="image-20201228144624819" style="zoom:50%;" /></li><li><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9AFlink%E7%AE%80%E4%BB%8B/image-20201228145047007.png" alt="image-20201228145047007" style="zoom:50%;" /><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9AFlink%E7%AE%80%E4%BB%8B/image-20201228145311986.png" alt="image-20201228145311986"></li><li><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9AFlink%E7%AE%80%E4%BB%8B/image-20201228145338461.png" alt="image-20201228145338461" style="zoom:50%;" /><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9AFlink%E7%AE%80%E4%BB%8B/image-20201228145536693.png" alt="image-20201228145536693"></li><li><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9AFlink%E7%AE%80%E4%BB%8B/image-20201228145556588.png" alt="image-20201228145556588" style="zoom:50%;" /></li></ol></li></ol></li><li><h4 id="Flink的主要特点"><a href="#Flink的主要特点" class="headerlink" title="Flink的主要特点"></a>Flink的主要特点</h4><ol><li><p>事件驱动（Eveny-driven）</p><ol><li><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9AFlink%E7%AE%80%E4%BB%8B/image-20201228145907225.png" alt="image-20201228145907225" style="zoom:50%;" /></li><li><p>基于流的世界观</p><ol><li>在Flink的世界观中，一切都是流组成的，离线数据是有界的流，实时数据是一个没有界限的流；这就是所谓的有界流和无界流<img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9AFlink%E7%AE%80%E4%BB%8B/image-20201228150125877.png" alt="image-20201228150125877" style="zoom:50%;" /></li></ol></li><li><p>分层API</p><ol><li><p>越顶层越抽象，表达含义越简明，使用越方便</p></li><li><p>越底层越具体，表达能力越丰富，使用越灵活</p><p><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9AFlink%E7%AE%80%E4%BB%8B/image-20201228150350452.png" alt="image-20201228150350452"></p></li></ol></li><li><p>Flink的其他特定</p><ol><li>支持事件时间（event-time）和处理时间（processing-time）语义</li><li>精确一次（exactly-once）的状态一致性保证</li><li>低延迟，每秒处理数百万个时间，毫秒级延迟</li><li>与众多常用存储系统的链接</li><li>高可用动态扩展，实现7<em>24小时全天候运行</em></li></ol></li></ol></li></ol></li><li><h4 id="Flink-Vs-Spark-streaming"><a href="#Flink-Vs-Spark-streaming" class="headerlink" title="Flink Vs Spark streaming"></a>Flink Vs Spark streaming</h4><ol><li><p>流（stream）和微批（micro-batching）</p><img src="/images/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9AFlink%E7%AE%80%E4%BB%8B/image-20201228151003997.png" alt="image-20201228151003997" style="zoom: 50%;" /></li><li><p>数据模型</p><ul><li>sprark 采用的是RDD模型，spark streaming的DStream实际上也就是一组组小批数据的RDD的集合</li><li>Flink基本数据模型是数据流，以及事件（Event）序列</li></ul></li><li><p>运行时架构</p><ul><li>spark是批计算，将DAG划分为不同的stage，一个完成后才可以计算下一个</li><li>Flink是标准的流执行模式，一个事件在一个节点处理完后可以直接发往下一个节点进行处理</li></ul></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;h4 id=&quot;Flink是什么&quot;&gt;&lt;a href=&quot;#Flink是什么&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>flink学习笔记一 学习目标</title>
    <link href="https://richard-xiong.github.io/2020/12/27/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80%20%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/"/>
    <id>https://richard-xiong.github.io/2020/12/27/flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80%20%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/</id>
    <published>2020-12-27T10:43:01.000Z</published>
    <updated>2020-12-27T11:11:39.180Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ol><li>对flink做下整体的介绍了解，</li><li>写一个wordcount做一个快速上手</li><li>做一个部署运行</li><li>了解运行Ⅹ的架构和任务调度原理</li><li>了解Flink里边各类api的用法，主要就是datastream api ，source 、transform 、sink三大部分</li><li>窗口window相关的操作</li><li>时间语义和watermark</li><li>底层的api使用方法</li><li>状态编程和容错机制</li><li>更加高级的api与sql</li><li>cep相关的内容</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;对flink做下整体的介绍了解，&lt;/li&gt;
&lt;li&gt;写一个wordcount做一个快速上手&lt;/li&gt;
&lt;li&gt;做
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vmware-NAT配置</title>
    <link href="https://richard-xiong.github.io/2020/12/20/vmware-NAT%E9%85%8D%E7%BD%AE/"/>
    <id>https://richard-xiong.github.io/2020/12/20/vmware-NAT%E9%85%8D%E7%BD%AE/</id>
    <published>2020-12-19T16:24:06.000Z</published>
    <updated>2020-12-22T04:04:31.885Z</updated>
    
    <content type="html"><![CDATA[<h3 id="搭建前提"><a href="#搭建前提" class="headerlink" title="搭建前提"></a>搭建前提</h3><p>配置前提，没有连接宽带，使用的是wifi。</p><h4 id="我们需要先了解一下什么是NAT"><a href="#我们需要先了解一下什么是NAT" class="headerlink" title="我们需要先了解一下什么是NAT"></a>我们需要先了解一下什么是NAT</h4><h5 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h5><p>在Windows上搭建集群实验环境时，为能够让集群结点之间相互通信，我们需要通过VMware进行网络设置。我们主要讲解NAT模式(网络地址转换模式)的原理及配置过程。</p><h5 id="二、工作原理"><a href="#二、工作原理" class="headerlink" title="二、工作原理"></a>二、工作原理</h5><p>1.“NAT”类型，称为网络地址转换，在“仅主机”类型的基础上提供了guest可以访问外部host的能力<br>2.虚拟机之间、虚拟机和宿主机之间、虚拟机和外部host之间都可以进行通信<br>3.虚拟机的IP只需要配置NAT网段中的IP，访问外部host可以通过宿主机IP访问。它不需要有外部网络独立的IP（即物理交换机网段中的IP）<br>4.优点：虚拟机的网络配置确定后，就可以很少变动。因为NAT配置不变，宿主机连接的网络变化，不影响虚拟机。所以大部分集群实验选择的就是NAT模式</p><img src="/images/vmware-NAT%E9%85%8D%E7%BD%AE/SouthEast.png" alt="这里写图片描述" style="zoom: 67%;" /><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>需要宿主机关闭防火墙</li><li>需要开启主机VMware的2个服务：NAT和DHCP（默认是开启的），如果没有开启，在虚拟机中添加vm0，vm1.vm8，在宿主机中就会自动创建出来了。</li><li>NAT使用得是VMnet8得虚拟网卡，我们需要将<img src="/images/vmware-NAT%E9%85%8D%E7%BD%AE/image-20201219163743635.png" alt="image-20201219163743635"></li></ol><p>wlan配置共享给VMnet8，然后修改vmnet8得ip v4配置</p><img src="/images/vmware-NAT%E9%85%8D%E7%BD%AE/image-20201219164052935.png" alt="image-20201219164052935" style="zoom:50%;" /><ol start="4"><li><p>设置vmnet8 ip地址为192.168.0.2,默认网关设置为192.168.0.1 子网掩码设置为255.255.255.0</p></li><li><p>设置虚拟机使用NAT模式进行和宿主机连接 <img src="/images/vmware-NAT%E9%85%8D%E7%BD%AE/image-20201219164519656.png" alt="image-20201219164519656" style="zoom: 25%;" /></p></li><li><p>编辑虚拟机中的网络配置<img src="/images/vmware-NAT%E9%85%8D%E7%BD%AE/image-20201219164645822.png" alt="image-20201219164645822" style="zoom:25%;" />，</p><p>同时还需要设置图中得DHCP配置，配置虚拟机静态ip所属得网段。<img src="/images/vmware-NAT%E9%85%8D%E7%BD%AE/image-20201219164830809.png" alt="image-20201219164830809" style="zoom:25%;" /></p><ol start="7"><li><p>配置虚拟机网卡信息：切换root用户，输入以下命令，进入VI编辑，配置保存即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth33</span><br></pre></td></tr></table></figure><img src="/images/vmware-NAT%E9%85%8D%E7%BD%AE/image-20201219165024491.png" alt="image-20201219165024491" style="zoom:50%;" /><ol start="8"><li><p>重启网络服务 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用service命令</span></span><br><span class="line">service network restart </span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 systemctl </span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h3 id="借鉴的链接"><a href="#借鉴的链接" class="headerlink" title="借鉴的链接"></a>借鉴的链接</h3><ol><li><a href="https://blog.csdn.net/dingguanyi/article/details/77829085">https://blog.csdn.net/dingguanyi/article/details/77829085</a> </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;搭建前提&quot;&gt;&lt;a href=&quot;#搭建前提&quot; class=&quot;headerlink&quot; title=&quot;搭建前提&quot;&gt;&lt;/a&gt;搭建前提&lt;/h3&gt;&lt;p&gt;配置前提，没有连接宽带，使用的是wifi。&lt;/p&gt;
&lt;h4 id=&quot;我们需要先了解一下什么是NAT&quot;&gt;&lt;a href=&quot;#我
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>k8s-组件说明1</title>
    <link href="https://richard-xiong.github.io/2020/12/18/k8s-%E7%BB%84%E4%BB%B6%E8%AF%B4%E6%98%8E1/"/>
    <id>https://richard-xiong.github.io/2020/12/18/k8s-%E7%BB%84%E4%BB%B6%E8%AF%B4%E6%98%8E1/</id>
    <published>2020-12-18T15:14:39.000Z</published>
    <updated>2020-12-19T08:04:25.568Z</updated>
    
    <content type="html"><![CDATA[<p>k8s-组件说明1</p><p>borg系统的架构</p><img src="/images/k8s-%E7%BB%84%E4%BB%B6%E8%AF%B4%E6%98%8E1/image-20201218221737256.png" alt="image-20201218221737256" style="zoom:50%;" /><ol><li><p>borgmaster 是所有 任务得分发、是整个系统得大脑，为了防止单节点故障、会发现borgmaster有许多副本、并且副本数目是奇数、为了方便选举</p></li><li><p>borglet 是任务真正的工作节点，从borgmaster获取要执行得任务</p></li><li><p>scheduler 是对任务进行安排应该哪些borglet有能力去执行，对任务进行打分，将</p></li><li><p>可以通过配置文件、命令行、浏览器来访问borgmaster得配置</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;k8s-组件说明1&lt;/p&gt;
&lt;p&gt;borg系统的架构&lt;/p&gt;
&lt;img src=&quot;/images/k8s-%E7%BB%84%E4%BB%B6%E8%AF%B4%E6%98%8E1/image-20201218221737256.png&quot; alt=&quot;image-202012
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>k8s-初识1</title>
    <link href="https://richard-xiong.github.io/2020/12/18/k8s-%E5%88%9D%E8%AF%861/"/>
    <id>https://richard-xiong.github.io/2020/12/18/k8s-%E5%88%9D%E8%AF%861/</id>
    <published>2020-12-18T11:55:09.000Z</published>
    <updated>2020-12-18T03:57:10.630Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>tencent准备工作</title>
    <link href="https://richard-xiong.github.io/2020/12/17/tencent%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    <id>https://richard-xiong.github.io/2020/12/17/tencent%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</id>
    <published>2020-12-17T11:38:36.000Z</published>
    <updated>2020-12-17T03:50:35.225Z</updated>
    
    <content type="html"><![CDATA[<p>部门：未来实验室-车路协同平台组</p><p>核心业务: </p><ol><li>端的工作（android端，小程序端）这部分工作不多</li><li>纯后台的工作（go多）</li><li>后台+web的工作（web管理类）这部分go+react </li><li>交通仿真器的工作 python</li><li>平台的工作 和边缘计算平台结合的如k8s之类的组件使用的之类的</li></ol><p>业务特性：</p><ol><li>大数据、这个大数据可能是超乎想象的大数据，一台无人车一天几tb的数据</li><li>高实时两个非常重要的特性的、高实时也是超乎想象的，需要服务有百毫秒级别的延迟</li><li>当然我们的这个产品是很多高实时的特性，有可能传统的组件都不适用、需要我们自己研发</li></ol><p>补充：</p><ol><li>这里的百毫秒是端到端的时延，不是服务时延，也就是服务时延可能只有10ms左右的，但是这里又有很多的计算、目前都处于探索和权衡的阶段，也就没有找到特别合适的组件，这里面最近正在做的也是要各种对比选型，看看情况</li></ol><p>自己负责的工作：</p><ol><li>平台的工作 和边缘计算平台结合的如k8s之类的组件使用的之类的</li><li>组件化，之前我们的产品是poc层级的，现在要poc转化成可交付的产品，这里面有很多组件化的工作，比如引入redis，hbase等等组件去改造</li><li>有兴趣可以研究一下flink之类的流处理组件的一些指标</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;部门：未来实验室-车路协同平台组&lt;/p&gt;
&lt;p&gt;核心业务: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;端的工作（android端，小程序端）这部分工作不多&lt;/li&gt;
&lt;li&gt;纯后台的工作（go多）&lt;/li&gt;
&lt;li&gt;后台+web的工作（web管理类）这部分go+react &lt;/li&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://richard-xiong.github.io/2020/12/03/log-%E6%97%A5%E5%BF%97%E5%AE%9A%E6%97%B6%E6%B8%85%E7%90%86/"/>
    <id>https://richard-xiong.github.io/2020/12/03/log-%E6%97%A5%E5%BF%97%E5%AE%9A%E6%97%B6%E6%B8%85%E7%90%86/</id>
    <published>2020-12-03T03:55:01.816Z</published>
    <updated>2020-12-07T03:07:34.225Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、<a href="https://www.jianshu.com/p/c8751434b9fb">思路</a></h3><p>定时删除日志，其实分为两个过程：</p><ol><li>查找符合条件的日志并删除</li><li>定时<br>过程1需要写一个查找脚本，过程2需要用到linux的crontab</li></ol><h3 id="二、查找并删除"><a href="#二、查找并删除" class="headerlink" title="二、查找并删除"></a>二、查找并删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim delete-logs.sh</span><br></pre></td></tr></table></figure><p>删除指定目录下1天以上的日志文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> access.log</span></span><br><span class="line">find /home/work/local/cb-recommendation/logs -name &quot;access.log.*&quot; -mtime +1 -exec  rm -rf &#123;&#125;  \;</span><br><span class="line"><span class="meta">#</span><span class="bash"> counter.log</span></span><br><span class="line">find /home/work/local/cb-recommendation/logs -name &quot;counter.log.*&quot; -mtime +1 -exec  rm -rf &#123;&#125;  \; </span><br><span class="line"><span class="meta">#</span><span class="bash"> geo.log</span></span><br><span class="line">find /home/work/local/cb-recommendation/logs -name &quot;geo.log.*&quot; -mtime +1 -exec  rm -rf &#123;&#125;  \;</span><br><span class="line"><span class="meta">#</span><span class="bash"> recommend.err.log</span></span><br><span class="line">find /home/work/local/cb-recommendation/logs -name &quot;recommend.err.log.*&quot; -mtime +1 -exec  rm -rf &#123;&#125;  \;</span><br><span class="line"><span class="meta">#</span><span class="bash"> recommend.log</span></span><br><span class="line">find /home/work/local/cb-recommendation/logs -name &quot;recommend.log.*&quot; -mtime +1 -exec  rm -rf &#123;&#125;  \;</span><br><span class="line"><span class="meta">#</span><span class="bash"> timer.log</span></span><br><span class="line">find /home/work/local/cb-recommendation/logs -name &quot;timer.log.*&quot; -mtime +1 -exec  rm -rf &#123;&#125;  \;</span><br></pre></td></tr></table></figure><p>授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> chmod +x delete-logs.sh</span></span><br></pre></td></tr></table></figure><h3 id="三、linux定时任务"><a href="#三、linux定时任务" class="headerlink" title="三、linux定时任务"></a>三、linux定时任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># crontab -e</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># | .-------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># | | .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># | | | .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># | | | | |</span></span><br><span class="line"><span class="comment"># * * * * * user-name command to be executed</span></span><br><span class="line"> 55 23 * * * /home/work/scripts/delete-logs.sh</span><br></pre></td></tr></table></figure><p>完工</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、思路&quot;&gt;&lt;a href=&quot;#一、思路&quot; class=&quot;headerlink&quot; title=&quot;一、思路&quot;&gt;&lt;/a&gt;一、&lt;a href=&quot;https://www.jianshu.com/p/c8751434b9fb&quot;&gt;思路&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;定时删除日志，其实
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang源码学习之interface的底层实现</title>
    <link href="https://richard-xiong.github.io/2020/11/22/golang%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8Binterface%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
    <id>https://richard-xiong.github.io/2020/11/22/golang%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8Binterface%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-11-21T16:27:15.000Z</published>
    <updated>2020-11-21T08:30:29.035Z</updated>
    
    <content type="html"><![CDATA[<h3 id="interface的底层实现"><a href="#interface的底层实现" class="headerlink" title="interface的底层实现"></a>interface的底层实现</h3><p>在golang中，interface也是一个结构体，记录了2个指针：</p><ul><li>指针1，指向该变量的类型</li><li>指针2，指向该变量的value</li></ul><p>_type<code>可以认为是Go语言中所有类型的公共描述，Go语言中几乎所有的数据结构都可以抽象成</code>_type<code>，是所有类型的表现，可以说是万能类型， </code>data`是指向具体数据的指针。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;interface的底层实现&quot;&gt;&lt;a href=&quot;#interface的底层实现&quot; class=&quot;headerlink&quot; title=&quot;interface的底层实现&quot;&gt;&lt;/a&gt;interface的底层实现&lt;/h3&gt;&lt;p&gt;在golang中，interface也是一个
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang源码学习之如何判断一个channel已关闭</title>
    <link href="https://richard-xiong.github.io/2020/11/21/golang%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AAchannel%E5%B7%B2%E5%85%B3%E9%97%AD/"/>
    <id>https://richard-xiong.github.io/2020/11/21/golang%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AAchannel%E5%B7%B2%E5%85%B3%E9%97%AD/</id>
    <published>2020-11-21T11:26:02.000Z</published>
    <updated>2020-11-21T06:19:44.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何判断一个channel已经关闭"><a href="#如何判断一个channel已经关闭" class="headerlink" title="如何判断一个channel已经关闭"></a>如何判断一个channel已经关闭</h3><ol><li><p>从channel中读取数据</p><ol><li>第二个字段为true时 证明channel可能没关闭、也可能已经关闭了、不能证明什么</li><li>第二个字段为false时，可以证明channel中已经没有残留数据、且已经关闭</li></ol></li><li><p>如果channel c已经被关闭,继续往它发送数据会导致<code>panic: send on closed channel</code>:</p><p>但是从这个关闭的channel中不但可以读取出已发送的数据，还可以不断的读取零值:</p></li><li><p>如果通过<code>range</code>读取，channel关闭后for循环会跳出：</p></li><li><p>可以直接读取channel结构hchan的closed字段，但问题chan.go没有开放这样的api，所以我们要用reflect这个黑科技了。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xiaorui.cc  https://blog.csdn.net/cyb_17302190874/article/details/106771295</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">    <span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isChanClosed</span><span class="params">(ch <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> reflect.TypeOf(ch).Kind() != reflect.Chan &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;only channels!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    cptr := *(*<span class="keyword">uintptr</span>)(unsafe.Pointer(</span><br><span class="line">        unsafe.Pointer(<span class="keyword">uintptr</span>(unsafe.Pointer(&amp;ch)) + unsafe.Sizeof(<span class="keyword">uint</span>(<span class="number">0</span>))),</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this function will return true if chan.closed &gt; 0</span></span><br><span class="line">    <span class="comment">// see hchan on https://github.com/golang/go/blob/master/src/runtime/chan.go</span></span><br><span class="line">    <span class="comment">// type hchan struct &#123;</span></span><br><span class="line">    <span class="comment">// qcount   uint           // total data in the queue</span></span><br><span class="line">    <span class="comment">// dataqsiz uint           // size of the circular queue</span></span><br><span class="line">    <span class="comment">// buf      unsafe.Pointer // points to an array of dataqsiz elements</span></span><br><span class="line">    <span class="comment">// elemsize uint16</span></span><br><span class="line">    <span class="comment">// closed   uint32</span></span><br><span class="line">    <span class="comment">// **</span></span><br><span class="line"></span><br><span class="line">    cptr += unsafe.Sizeof(<span class="keyword">uint</span>(<span class="number">0</span>))*<span class="number">2</span></span><br><span class="line">    cptr += unsafe.Sizeof(unsafe.Pointer(<span class="keyword">uintptr</span>(<span class="number">0</span>)))</span><br><span class="line">    cptr += unsafe.Sizeof(<span class="keyword">uint16</span>(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> *(*<span class="keyword">uint32</span>)(unsafe.Pointer(cptr)) &gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li><p>配合一个context或者一个变量来做。就拿context来说，那么select不仅可以读取数据chan，且同事监听&lt;- context.Done() , 当context.Done()有事件，直接退出就ok了。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 转自https://blog.csdn.net/cyb_17302190874/article/details/106771295</span></span><br><span class="line"> ...</span><br><span class="line">    ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">    <span class="built_in">close</span>(c)</span><br><span class="line">    cancel()</span><br><span class="line">exit:</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> data, ok := &lt;-c:</span><br><span class="line">            fmt.Println(data, ok)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">            <span class="keyword">break</span> exit</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何判断一个channel已经关闭&quot;&gt;&lt;a href=&quot;#如何判断一个channel已经关闭&quot; class=&quot;headerlink&quot; title=&quot;如何判断一个channel已经关闭&quot;&gt;&lt;/a&gt;如何判断一个channel已经关闭&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://richard-xiong.github.io/2020/11/17/%E7%BB%99%E4%BD%A0100w%E4%B8%AA%E6%95%B0%E5%AD%97%20%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%9C%80%E5%A4%A7%E7%9A%84100%E4%B8%AA%E6%95%B0%E5%AD%97%EF%BC%8C%E9%82%A3%E4%B9%88%E4%B8%80%E4%B8%AA%E4%BA%BF%E5%91%A2%20%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/"/>
    <id>https://richard-xiong.github.io/2020/11/17/%E7%BB%99%E4%BD%A0100w%E4%B8%AA%E6%95%B0%E5%AD%97%20%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%9C%80%E5%A4%A7%E7%9A%84100%E4%B8%AA%E6%95%B0%E5%AD%97%EF%BC%8C%E9%82%A3%E4%B9%88%E4%B8%80%E4%B8%AA%E4%BA%BF%E5%91%A2%20%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/</id>
    <published>2020-11-17T12:14:10.047Z</published>
    <updated>2020-11-17T12:14:10.047Z</updated>
    
    <content type="html"><![CDATA[<h3 id="给你100w个数字-如何获取最大的100个数字，那么一个亿呢-怎么处理"><a href="#给你100w个数字-如何获取最大的100个数字，那么一个亿呢-怎么处理" class="headerlink" title="给你100w个数字 如何获取最大的100个数字，那么一个亿呢 怎么处理"></a>给你100w个数字 如何获取最大的100个数字，那么一个亿呢 怎么处理</h3><h3 id="排序-用哪种排序-他的时间复杂度-最优情况是什么-最差情况是什么样"><a href="#排序-用哪种排序-他的时间复杂度-最优情况是什么-最差情况是什么样" class="headerlink" title="排序 用哪种排序 他的时间复杂度 最优情况是什么 最差情况是什么样"></a>排序 用哪种排序 他的时间复杂度 最优情况是什么 最差情况是什么样</h3><h3 id="你有什么要问面试官的吗？"><a href="#你有什么要问面试官的吗？" class="headerlink" title="你有什么要问面试官的吗？"></a>你有什么要问面试官的吗？</h3><h3 id="您的团队是什么样的？你对您的团队有什么规划吗？有没有定期的做技术分享呢？然后说说自己团队的技术分享是怎么做的"><a href="#您的团队是什么样的？你对您的团队有什么规划吗？有没有定期的做技术分享呢？然后说说自己团队的技术分享是怎么做的" class="headerlink" title="您的团队是什么样的？你对您的团队有什么规划吗？有没有定期的做技术分享呢？然后说说自己团队的技术分享是怎么做的"></a>您的团队是什么样的？你对您的团队有什么规划吗？有没有定期的做技术分享呢？然后说说自己团队的技术分享是怎么做的</h3><h3 id="你对我本次的面试评价觉得怎么样？"><a href="#你对我本次的面试评价觉得怎么样？" class="headerlink" title="你对我本次的面试评价觉得怎么样？"></a>你对我本次的面试评价觉得怎么样？</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;给你100w个数字-如何获取最大的100个数字，那么一个亿呢-怎么处理&quot;&gt;&lt;a href=&quot;#给你100w个数字-如何获取最大的100个数字，那么一个亿呢-怎么处理&quot; class=&quot;headerlink&quot; title=&quot;给你100w个数字 如何获取最大的100个数
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://richard-xiong.github.io/2020/11/10/%E4%BC%B4%E9%B1%BC%E9%9D%A2%E8%AF%95%E9%A2%98%20/"/>
    <id>https://richard-xiong.github.io/2020/11/10/%E4%BC%B4%E9%B1%BC%E9%9D%A2%E8%AF%95%E9%A2%98%20/</id>
    <published>2020-11-10T13:46:28.850Z</published>
    <updated>2020-11-10T13:46:28.850Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个字符串表示的数字 str ， (只包含0-9，没有前导0)， </p><p>再给一个整数K，k &lt;= len(str) </p><p>从str里删掉k个字符，使剩下的字符串表示的数值最小 (原字符串里，每个字符的顺序是不能改变的。)</p><p>str=”351” k=1</p><p>“31”</p><p>str=”3519” k=1</p><p>“319” </p><p>3519 K=2</p><p>319 k=1</p><p>351  359 5193</p><p>str=”3519” k=2</p><p>35 51 </p><p>35 31  39 51 59 19</p><p>结果  len-k</p><p>15分钟</p><p>35991 k=2</p><p>351</p><p>12345  k=3</p><p>func getMin（str string,k int）string{</p><p> max:=-1 </p><p>for （i:=0;i&lt;len-k;i++）{</p><p>if str[i:k] &gt; max{}</p><p>}</p><p>for  k– {</p><p>first:=strconv.atoi(str[0])</p><p>second:=strconv.atoi(str[1]) //i</p><p>if first&lt;second{</p><p> str= str[0]+str[2:]</p><p>391</p><p>}else{</p><p>str= str[1：]</p><p> }</p><p>}</p><p>  return str</p><p>}</p><p>1000万推送量，下游PUSH接口的QPS 1w/s的限制</p><p>\1. 在预定时间内 比如 30分钟推完1000万条push</p><p>\2. 控制推送速率，不能打垮下游RPC接口</p><p><img src="/Users/mengfanxing_g/richard/blog/XingServer/source/_posts/image-20201110214534990.png" alt="image-20201110214534990">                       ![            </p><p>​          <img src="/Users/mengfanxing_g/richard/blog/XingServer/source/_posts/image-20201110214447919.png" alt="11">            </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个字符串表示的数字 str ， (只包含0-9，没有前导0)， &lt;/p&gt;
&lt;p&gt;再给一个整数K，k &amp;lt;= len(str) &lt;/p&gt;
&lt;p&gt;从str里删掉k个字符，使剩下的字符串表示的数值最小 (原字符串里，每个字符的顺序是不能改变的。)&lt;/p&gt;
&lt;p&gt;str=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>interview-go</title>
    <link href="https://richard-xiong.github.io/2020/11/04/interview-go/"/>
    <id>https://richard-xiong.github.io/2020/11/04/interview-go/</id>
    <published>2020-11-03T16:53:25.000Z</published>
    <updated>2020-11-07T14:52:40.861Z</updated>
    
    <content type="html"><![CDATA[<h4 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h4><h4 id="go基础"><a href="#go基础" class="headerlink" title="go基础"></a>go基础</h4><ol><li><p>说说go的优点</p><ol><li>go的性能是Python的35倍</li><li>性能 （因为golang是机器代码） 编译后的文件可以直接放在机器上执行</li><li>开发的过程中 无效的字段或者包名引用 会强制提醒错误，有fmt 统一代码的格式</li><li>并发支持  channel和goroutine的性能很出色，可以非常方便的启动一个协程，很容易的生出数百万个goroutine</li><li>内置运行时gc，是通过三色法来对垃圾进行回收，可以满足大多数关于垃圾收集的请求</li><li>简单易学，非常容易上手</li><li>可以返回多个值，虽然java也支持（最多支持三个）</li><li>非常节省内存 1.12之前一个goroutinue的内存大概占用2kb，而一个java线程默认是2mb，1.17之后已经改为8kb了</li><li>接口的实现非常方便，可以通过内嵌struct来实现继承</li><li>if…;… {} 可以将变量的作用域放在if内 很棒</li><li>单元测试和并发测试都很方便</li></ol><p>缺点是</p><ol><li>缺乏框架、 没有像java那种开发小项目使用springboot springcloud 这种比较成熟的框架、不过对于goweb开发 有beego 、gin等、对于分布式有gomicro、gokit，</li><li>错误处理，经常要对错误进行判断 </li><li>使用的用法很多坑，比如slice传递的是引用不是副本 ，如果调用的func 不会对slice进行修改传递本身是没问题，如果需要修改就需要考虑使用copy（src，dest）来进行， 如果知道要slice要存储的空间是多少，在初始化的时候要使用 make([]int，nums)来声明，防止在append过程中会发生扩容操作。<br>nil切片、空切片、零切片的区别，var str []int 这种是nil切片 ，序列化之后是null，var str = []int{} 这种是空切片，序列化之后是[] 空数组，领切片就是 make([]int,10) 初始化之后 底层数组存储的数据都是0，官方不推荐创建空切片、也不推荐nil切片和nil进行对比</li><li>map中struct的单个字段 是非法的，因为map中的元素是不能寻址的</li></ol></li><li><p>谈谈golang的csp模型</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;自我介绍&quot;&gt;&lt;a href=&quot;#自我介绍&quot; class=&quot;headerlink&quot; title=&quot;自我介绍&quot;&gt;&lt;/a&gt;自我介绍&lt;/h4&gt;&lt;h4 id=&quot;go基础&quot;&gt;&lt;a href=&quot;#go基础&quot; class=&quot;headerlink&quot; title=&quot;go基础&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>interview-golang GC</title>
    <link href="https://richard-xiong.github.io/2020/11/04/interview-golang-GC/"/>
    <id>https://richard-xiong.github.io/2020/11/04/interview-golang-GC/</id>
    <published>2020-11-03T16:04:24.000Z</published>
    <updated>2020-11-03T08:04:57.882Z</updated>
    
    <content type="html"><![CDATA[<p>过去一般采用两种办法：</p><ul><li>内存泄露检测工具。这种工具的原理一般是静态代码扫描，通过扫描程序检测可能出现内存泄露的代码段。然而检测工具难免有疏漏和不足，只能起到辅助作用。</li><li>智能指针。这是 c++ 中引入的自动内存管理方法，通过拥有自动内存管理功能的指针对象来引用对象，是程序员不用太关注内存的释放，而达到内存自动释放的目的。这种方法是采用最广泛的做法，但是对程序开发者有一定的学习成本（并非语言层面的原生支持），而且一旦有忘记使用的场景依然无法避免内存泄露。</li></ul><p>为了解决这个问题，后来开发出来的几乎所有新语言（java，python，php等等）都引入了语言层面的自动内存管理 – 也就是语言的使用者只用关注内存的申请而不必关心内存的释放，内存释放由虚拟机（virtual machine）或运行时（runtime）来自动进行管理。而这种对不再使用的内存资源进行自动回收的行为就被称为垃圾回收。</p><p>常用的垃圾回收的方法:</p><ul><li>引用计数（reference counting）</li></ul><p>这是最简单的一种垃圾回收算法，和之前提到的智能指针异曲同工。对每个对象维护一个引用计数，当引用该对象的对象被销毁或更新时被引用对象的引用计数自动减一，当被引用对象被创建或被赋值给其他对象时引用计数自动加一。当引用计数为0时则立即回收对象。</p><p>这种方法的优点是实现简单，并且内存的回收很及时。这种算法在内存比较紧张和实时性比较高的系统中使用的比较广泛，如ios cocoa框架，php，python等。</p><p>但是简单引用计数算法也有明显的缺点：</p><ol><li>频繁更新引用计数降低了性能。</li></ol><p>一种简单的解决方法就是编译器将相邻的引用计数更新操作合并到一次更新；还有一种方法是针对频繁发生的临时变量引用不进行计数，而是在引用达到0时通过扫描堆栈确认是否还有临时对象引用而决定是否释放。等等还有很多其他方法，具体可以参考这里。</p><ol><li>循环引用。</li></ol><p>当对象间发生循环引用时引用链中的对象都无法得到释放。最明显的解决办法是避免产生循环引用，如cocoa引入了strong指针和weak指针两种指针类型。或者系统检测循环引用并主动打破循环链。当然这也增加了垃圾回收的复杂度。</p><ul><li>标记-清除（mark and sweep）</li></ul><p>标记-清除（mark and sweep）分为两步，标记从根变量开始迭代得遍历所有被引用的对象，对能够通过应用遍历访问到的对象都进行标记为“被引用”；标记完成后进行清除操作，对没有标记过的内存进行回收（回收同时可能伴有碎片整理操作）。这种方法解决了引用计数的不足，但是也有比较明显的问题：每次启动垃圾回收都会暂停当前所有的正常代码执行，回收是系统响应能力大大降低！当然后续也出现了很多mark&amp;sweep算法的变种（如三色标记法）优化了这个问题。</p><ul><li>分代搜集（generation）</li></ul><p>java的jvm 就使用的分代回收的思路。在面向对象编程语言中，绝大多数对象的生命周期都非常短。分代收集的基本思想是，将堆划分为两个或多个称为代（generation）的空间。新创建的对象存放在称为新生代（young generation）中（一般来说，新生代的大小会比 老年代小很多），随着垃圾回收的重复执行，生命周期较长的对象会被提升（promotion）到老年代中（这里用到了一个分类的思路，这个是也是科学思考的一个基本思路）。</p><p>因此，新生代垃圾回收和老年代垃圾回收两种不同的垃圾回收方式应运而生，分别用于对各自空间中的对象执行垃圾回收。新生代垃圾回收的速度非常快，比老年代快几个数量级，即使新生代垃圾回收的频率更高，执行效率也仍然比老年代垃圾回收强，这是因为大多数对象的生命周期都很短，根本无需提升到老年代。</p><p>Golang GC 时会发生什么?</p><p>Golang 1.5后，采取的是“非分代的、非移动的、并发的、三色的”标记清除垃圾回收算法。</p><p>golang 中的 gc 基本上是标记清除的过程：</p><p><a href="https://github.com/KeKe-Li/For-learning-Go-Tutorial/blob/master/src/images/2.jpg"><img src="/images/interview-golang-GC/2.jpg" alt="img"></a></p><p>gc的过程一共分为四个阶段：</p><ol><li>栈扫描（开始时STW）</li><li>第一次标记（并发）</li><li>第二次标记（STW）</li><li>清除（并发）</li></ol><p>整个进程空间里申请每个对象占据的内存可以视为一个图，初始状态下每个内存对象都是白色标记。</p><ol><li>先STW，做一些准备工作，比如 enable write barrier。然后取消STW，将扫描任务作为多个并发的goroutine立即入队给调度器，进而被CPU处理</li><li>第一轮先扫描root对象，包括全局指针和 goroutine 栈上的指针，标记为灰色放入队列</li><li>第二轮将第一步队列中的对象引用的对象置为灰色加入队列，一个对象引用的所有对象都置灰并加入队列后，这个对象才能置为黑色并从队列之中取出。循环往复，最后队列为空时，整个图剩下的白色内存空间即不可到达的对象，即没有被引用的对象；</li><li>第三轮再次STW，将第二轮过程中新增对象申请的内存进行标记（灰色），这里使用了write barrier（写屏障）去记录</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;过去一般采用两种办法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存泄露检测工具。这种工具的原理一般是静态代码扫描，通过扫描程序检测可能出现内存泄露的代码段。然而检测工具难免有疏漏和不足，只能起到辅助作用。&lt;/li&gt;
&lt;li&gt;智能指针。这是 c++ 中引入的自动内存管理方法，通过拥有自动
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>interview-golang常见的并发模型</title>
    <link href="https://richard-xiong.github.io/2020/11/03/interview-golang%E5%B8%B8%E8%A7%81%E7%9A%84%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    <id>https://richard-xiong.github.io/2020/11/03/interview-golang%E5%B8%B8%E8%A7%81%E7%9A%84%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-11-03T14:19:48.000Z</published>
    <updated>2020-11-03T08:00:27.793Z</updated>
    
    <content type="html"><![CDATA[<p>常见的并发模型：</p><ol><li><p>channel</p><p>无缓冲的通道通常指通道的大小为0，也就是说，这种类型的通道再接收之前没有能力保存任何值，它要求发送goroutinue和接收goroutinue同时准备好，才可以完成发送和接收</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;start working&quot;</span>)</span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">        ch &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    &lt;-ch</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;finished&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当主 goroutine 运行到 &lt;-ch 接受 channel 的值的时候，如果该 channel 中没有数据，就会一直阻塞等待，直到有值。 这样就可以简单实现并发控制</p></li><li><p>sync.waitGroup</p><p>Goroutine是异步执行的，有的时候为了防止在结束mian函数的时候结束掉Goroutine，所以需要同步等待，这个时候就需要用 WaitGroup了，在 sync 包中，提供了 WaitGroup ，它会等待它收集的所有 goroutine 任务全部完成。在WaitGroup里主要有三个方法:</p><ul><li>Add, 可以添加或减少 goroutine的数量.</li><li>Done, 相当于Add(-1).</li><li>Wait, 执行后会堵塞主线程，直到WaitGroup 里的值减至0.</li></ul><p>在主 goroutine 中 Add(delta int) 索要等待goroutine 的数量。 在每一个 goroutine 完成后 Done() 表示这一个goroutine 已经完成，当所有的 goroutine 都完成后，在主 goroutine 中 WaitGroup 返回</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">var</span> urls = []<span class="keyword">string</span>&#123;</span><br><span class="line">        <span class="string">&quot;http://www.golang.org/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://www.google.com/&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, url := <span class="keyword">range</span> urls &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(url <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            http.Get(url)</span><br><span class="line">        &#125;(url)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line">在Golang官网中对于WaitGroup介绍是A WaitGroup must not be copied after first use,在 WaitGroup 第一次使用后，不能被拷贝</span><br><span class="line"></span><br><span class="line">应用示例:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(wg sync.WaitGroup, i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;i:%d&quot;</span>, i)</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;(wg, i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(<span class="string">&quot;exit&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">运行:</span><br><span class="line"></span><br><span class="line">i:<span class="number">1i</span>:<span class="number">3i</span>:<span class="number">2i</span>:<span class="number">0i</span>:<span class="number">4</span>fatal error: all goroutines are asleep - deadlock!</span><br><span class="line"></span><br><span class="line">goroutine <span class="number">1</span> [semacquire]:</span><br><span class="line">sync.runtime_Semacquire(<span class="number">0xc000094018</span>)</span><br><span class="line">        /home/keke/soft/<span class="keyword">go</span>/src/runtime/sema.<span class="keyword">go</span>:<span class="number">56</span> +<span class="number">0x39</span></span><br><span class="line">sync.(*WaitGroup).Wait(<span class="number">0xc000094010</span>)</span><br><span class="line">        /home/keke/soft/<span class="keyword">go</span>/src/sync/waitgroup.<span class="keyword">go</span>:<span class="number">130</span> +<span class="number">0x64</span></span><br><span class="line">main.main()</span><br><span class="line">        /home/keke/<span class="keyword">go</span>/Test/wait.<span class="keyword">go</span>:<span class="number">17</span> +<span class="number">0xab</span></span><br><span class="line">exit status <span class="number">2</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>context</li></ol><p>通常,在一些简单场景下使用 channel 和 WaitGroup 已经足够了，但是当面临一些复杂多变的网络并发场景下 channel 和 WaitGroup 显得有些力不从心了。 比如一个网络请求 Request，每个 Request 都需要开启一个 goroutine 做一些事情，这些 goroutine 又可能会开启其他的 goroutine，比如数据库和RPC服务。 所以我们需要一种可以跟踪 goroutine 的方案，才可以达到控制他们的目的，这就是Go语言为我们提供的 Context，称之为上下文非常贴切，它就是goroutine 的上下文。 它是包括一个程序的运行环境、现场和快照等。每个程序要运行时，都需要知道当前程序的运行状态，通常Go 将这些封装在一个 Context 里，再将它传给要执行的 goroutine 。</p><p>context 包主要是用来处理多个 goroutine 之间共享数据，及多个 goroutine 的管理。</p><p>context 包的核心是 struct Context，接口声明如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A Context carries a deadline, cancelation signal, and request-scoped values</span></span><br><span class="line"><span class="comment">// across API boundaries. Its methods are safe for simultaneous use by multiple</span></span><br><span class="line"><span class="comment">// goroutines.</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// Done returns a channel that is closed when this `Context` is canceled</span></span><br><span class="line">    <span class="comment">// or times out.</span></span><br><span class="line">    Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Err indicates why this Context was canceled, after the Done channel</span></span><br><span class="line">    <span class="comment">// is closed.</span></span><br><span class="line">    Err() error</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Deadline returns the time when this Context will be canceled, if any.</span></span><br><span class="line">    Deadline() (deadline time.Time, ok <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Value returns the value associated with key or nil if none.</span></span><br><span class="line">    Value(key <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Done() 返回一个只能接受数据的channel类型，当该context关闭或者超时时间到了的时候，该channel就会有一个取消信号</p><p>E rr() 在Done() 之后，返回context 取消的原因。</p><p>Deadline() 设置该context cancel的时间点</p><p>Value() 方法允许 Context 对象携带request作用域的数据，该数据必须是线程安全的。</p><p>Context 对象是线程安全的，你可以把一个 Context 对象传递给任意个数的 gorotuine，对它执行 取消 操作时，所有 goroutine 都会接收到取消信号。</p><p>一个 Context 不能拥有 Cancel 方法，同时我们也只能 Done channel 接收数据。 其中的原因是一致的：接收取消信号的函数和发送信号的函数通常不是一个。 典型的场景是：父操作为子操作操作启动 goroutine，子操作也就不能取消父操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;常见的并发模型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;channel&lt;/p&gt;
&lt;p&gt;无缓冲的通道通常指通道的大小为0，也就是说，这种类型的通道再接收之前没有能力保存任何值，它要求发送goroutinue和接收goroutinue同时准备好，才可以完成发送和接收&lt;/p&gt;
&lt;fig
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://richard-xiong.github.io/2020/11/02/%E5%AD%9F%E5%87%A1%E6%98%9F%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
    <id>https://richard-xiong.github.io/2020/11/02/%E5%AD%9F%E5%87%A1%E6%98%9F%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/</id>
    <published>2020-11-02T02:37:58.128Z</published>
    <updated>2020-11-22T15:03:23.451Z</updated>
    
    <content type="html"><![CDATA[<p>孟凡星</p><p>电话：17600362123</p><p>邮箱：<a href="mailto:nizhidaoIEdeyisima@gmail.com">nizhidaoIEdeyisima@gmail.com</a>  <a href="mailto:17600362123@yahoo.com">17600362123@yahoo.com</a></p><h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><p>男 未婚</p><p>27岁</p><p>沈阳大学/本科</p><p>工作经验：4年</p><p>现居住地： 北京</p><p>户口所在地：辽宁-葫芦岛</p><p>求职意向 偏向于go</p><p>期望工作性质 : 全职</p><p>期望月薪 : 35k/月</p><p>期望从事行业 : 计算机软件</p><p>期望从事职业 : 软件开发</p><p>期望工作地点 : 北京</p><p>目前状况 : 我目前处于在职</p><p>自我评价</p><ol><li>老实、踏实、认真、仔细、有责任心是我的做事方式，总会高于领导的要求来严格要求自己，对领导分配的任务能高效及时的完成。</li><li>抗压能力、自学能力强，对在开发中用到的新技术、疑难问题，能够快速的从网上或其他地方获取解决办法，有自己的学习笔记，乐于技术分享</li><li>能指导初级、中级工程师进行开发。</li><li>对工作负责，有集体荣誉感，任劳任怨。</li><li>热爱学习，热衷于技术，经常学习新技术补充自己。</li><li>有带领团队的经验（5-8人）</li><li>对于容器化的部署有丰富的经验</li></ol><h2 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h2><h3 id="2018-7月至今北京小熊博望（百度国际化）"><a href="#2018-7月至今北京小熊博望（百度国际化）" class="headerlink" title="2018.7月至今北京小熊博望（百度国际化）"></a>2018.7月至今北京小熊博望（百度国际化）</h3><h3 id="2017-10月2018-7中国中煤能源股份有限公司"><a href="#2017-10月2018-7中国中煤能源股份有限公司" class="headerlink" title="2017.10月2018.7中国中煤能源股份有限公司"></a>2017.10月2018.7<a href="https://www.baidu.com/link?url=LvM0KE2SlhWwuukv0f2xuySMWmdIx4Qe1WzDvim-m7UkX_HB1ZCZ2muEUsOyB_fE&wd=&eqid=ae8224ba0003a119000000035b4ad478">中国中煤能源股份有限公司</a></h3><p>###2016.12月2017.9北京智慧流科技教育有限公司</p><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><p><strong>2018.7-至今</strong></p><p>Meet （视频聊天 reslet netty） </p><p>Sleepiness （轻应用类 springboot）</p><p>SleepinessCMS （sleepiness的cms平台 Vue）</p><p>MaterialPlatform （轻应用类 springboot）</p><p>MaterialPlatformCMS （贴纸平台的cms  Vue）</p><p>输入法主题自动打包 （小工具类 内部使用 Go）</p><p>壁纸SDK (轻应用类 Go)</p><p>壁纸SDKCMS (壁纸cms Vue)</p><p>生酮饮食 (轻应用类 Go)</p><p>场景化sdk （小工具类 Go）</p><p>海外赚 （轻应用类Go）</p><p>海外赚CMS （轻应用类Go 开发中）</p><p>luck-quiz (轻应用类Go)新meet(java)</p><p><strong>2017.10月-2018.7</strong></p><p>Itzh集团的ERP系统 （企业内部管理系统ssm ext）</p><p><strong>2016.10-2017.9</strong></p><p>陕旅英语（k12 dubbo）</p><p>闽教英语（k12 dubbo）</p><p>湘少英语（k12 dubbo）</p><p>粤人英语（k12 dubbo）</p><p>课堂宝 （素材资源上传平台）</p><p><strong>在国际化工作描述 :</strong> </p><ol><li>负责国际化出海产品的开发</li><li>老百度国际化项目的迁移</li><li>Elk集群的部署和维护</li><li>实时分析公司各个产品线的pv、uv 、接口超时情况、日志error报警</li><li>代码review及优化</li><li>线上项目的维护</li><li>Springboot 和golang 对小工具、轻应用产品的开发</li><li>使用AWS CI/CD，云容器的部署、服务上线</li><li>技术分享</li><li>把控各个产品线的工作进度，确保主要产品线的正常迭代&amp;注意组员的工作状态</li><li>负责对招聘新员工进行面试及安排</li></ol><p><strong>meet项目描述</strong> </p><p>这个项目是海外的视频语音聊天软件，由于是全球范围内都有普及，用户可以相互视频或者语音聊天，所以引发了用户的很高兴趣，为了提高用户的体验，缓存用户的数据结构改为了redis hash（对uid取模来分shard），为了可以多条件筛选附近的聊天室，选取了用mongodb来对聊天室进行geo 建模，对于多种匹配策略，复用了工厂的设计模式，通过这个项目的开发，学习了很多，深入的明白了如何写出高质量的代码，实现需求功能如何做技术选型，熟练的使用shell编写脚本，来计算pv uv，编写定时任务（后期我搭建了elastic集群，能够实时的收集各个产品的日志，图形化的展示产品的健康情况，对于错误日志和接口的响应情况进行分析，能够及时发送给rd），后期优化为视频聊天，提供主播对用户一对一服务的聊天、通过对主播的录屏、接通时长还有接通率来给主播进行打分，实现流量倾斜，通过一些假用户的消息下发来吸引用户付费。 目前日pv1400w的pv ，项目部署再aws的eks上，通过pod的性能参数、来考虑是否要增加机器。</p><p><strong>luckquiz项目描述</strong></p><p> 这个是一个基于beego开发的项目，有答题、刮卡、乐透、幸运转盘的小游戏，初期是吸引用户玩游戏来消耗金币、然后通过开广告来获取奖励的生态模式来运作。通过aes对用户和时间戳来加密生成验证用户有效性的token、像答题、刮卡、转盘每天玩的次数都是有次数限制的、而且奖励的金币概率和中奖概率也需要随时用户金币数和现金数的增加而改变。其中答题要求下发给用户的题目信息不允许有重复的，</p><p>方案一： 使用mysql not in（性能太差）<br>方案二： 了解到 其实是给用户下发的题目和题库的题目做差集，使用redis sdiff 命令 redis key是这样的，因为sdiff key1 key2 ，<br>key1 key2 如果不在同一个slot上，就会发出redis 错误，所以开始用{}，先计算key的hash，将answer 用{}括起来，使其<br>落在同一个slot上,题库的题目 {answer}:load-questions:%questionType ,用户看过的题目 {answer}:load-questions-by:%userId<br>能到达预期目的<br>方案三： 方案二虽然能达到预期目的，但是随着用户量的增加、单个slot的容量总是有限的，所以在用户注册的时候，给每个用户都会将题库复制一份，<br>rediskey 与userId进行绑定,题库的题目 answer:load-questions:{userId}:questionType ,用户看过的题目 answer:load-questions-by:{userId}<br>这样解决了单个slot内存过于庞大的问题这个还有一个好处就是差集的计算都交给了redis 的机器去操作<br>方案四：使用bitset 指令 SETBIT key offset value 复杂度 O(1)<br>一个bit位来表示某个元素对应的值或者状态,其中的key就是对应元素本身。我们知道8个bit可以组成一个Byte，所以bitmap本身会极大的节省储存空间。之前存储一个questionId是int64类型 ，大概的空间占用计算公式是：($offset/8/1024/1024)MB，也就是说8388608 个题目在redis里才会占用1mb的内存空间， offset 标识题目id，0 标识未打过，1标识已经答过</p><p><strong>2017.10-月2018.7</strong></p><p><strong>在中煤工作描述 :</strong> </p><ol><li>负责企业内部网站的开发</li><li>对接口的性能进行自测，并对代码调优。</li><li>相关模块接口的开发和单元测试</li><li>代码review</li><li>线上项目的维护&amp;项目进度的推进</li><li>和项目经理确定需求可行性。</li></ol><p><strong>项目描述 :</strong></p><p>这个项目是做集团的ERP系统，这个项目极大的提高了部门领导对项目的审核效率和对资产预算的评估情况，以及资产管理部门对资产分配的了解，项目处对各个项目详细信息的控制情况。 这个项目涉及了资产模块、项目模块和采购模块这三个主要功能、</p><p>个人承担对项目模块的全部开发。这个项目采用的是Ssm架构、通过对mybatis-generator开源框架的修改、自动化生成了对表的业务逻辑的正删改查、和接口的自动化测试脚本和junit测试实例、因为这个项目是企业的办公软件、大多数业务逻辑都是围绕对表的增删改查、</p><p>所以大大的减轻了开发的时间、提高了开发效率。 这个项目的亮点就是解耦很成功、三个主要功能都可以各自拆分开来、整个项目采用的是前后端分离的开发模式、大大的提高了开发效率。通过这个项目我学到了工作流的开发、更重要的是和小组人员的及时沟通</p><p>能减少不必要的开发上的错误、也能提高工作效率、再一次的认识到在开发前小组讨论对业务的熟悉对开发而言的重要及必要性。而且在讨论中能够对自己想法淬炼、增强思维的严谨性。</p><p><strong>项目描述 :</strong> </p><p>专业技能</p><ul><li>微服务的两个派系 阿里系的dubbo 和SpringCloud栈系的SpringBoot。</li><li>云服务      aws 、huawei CI/CD ，docker 和k8s的使用 </li><li>熟练在Linux系统上开发，编写shell脚本</li><li>java golang  python nodejs     </li><li>基本框架 Spring SpringMvc Mybatis Hebinate     JPA vue beego </li><li>服务治理：zookeper </li><li>请求治理：nginx、elb、nlb</li><li>数据库：mysql 、redis 、mangodb、elasticearch oracle sqlserver、sql优化</li><li>前端：html5(熟悉) extjs、jquery、jsp</li><li>高并发基本技能：队列 多线程 </li><li>网络通信：netty 、socket</li><li>爬虫 （jsoup、python）</li></ul><p><strong>教育经历</strong></p><p><strong>2013.09-2017.06</strong> <strong>沈阳大学 |</strong> <strong>计算机科学与技术 |**</strong>本科**</p><p>所获证书</p><ul><li>全国大学生创新创业训练计划项目 国家三等奖</li><li>辽宁省创青春大学生创业比赛  银奖</li><li>辽宁省计算机软件设计大赛-外包组三等奖</li><li>沈阳大学计算机软件设计竞赛 一等奖</li><li>互联网+大学生创新创业大赛     一等奖</li><li>大学生移动应用开发大赛 三等奖</li><li>大学英语四级</li></ul><p>语言能力</p><p><strong>英语 :</strong> <strong>读写能力良好 |</strong> <strong>听说能力良好</strong></p><p><strong>其他：优秀毕业生</strong> <strong>答辩成绩 94</strong></p><p> 孟凡星</p><p>电话：17600362123</p><p>邮箱：<a href="mailto:nizhidaoIEdeyisima@gmail.com">nizhidaoIEdeyisima@gmail.com</a>  <a href="mailto:17600362123@yahoo.com">17600362123@yahoo.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;孟凡星&lt;/p&gt;
&lt;p&gt;电话：17600362123&lt;/p&gt;
&lt;p&gt;邮箱：&lt;a href=&quot;mailto:nizhidaoIEdeyisima@gmail.com&quot;&gt;nizhidaoIEdeyisima@gmail.com&lt;/a&gt;  &lt;a href=&quot;mailto:17600
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://richard-xiong.github.io/2020/11/02/%E7%BB%8F%E5%8E%86%E4%BB%8B%E7%BB%8D/"/>
    <id>https://richard-xiong.github.io/2020/11/02/%E7%BB%8F%E5%8E%86%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-11-02T02:37:58.128Z</published>
    <updated>2020-11-02T08:20:41.508Z</updated>
    
    <content type="html"><![CDATA[<p>孟凡星</p><p>电话：17600362123</p><p>邮箱：<a href="mailto:nizhidaoIEdeyisima@gmail.com">nizhidaoIEdeyisima@gmail.com</a>  <a href="mailto:17600362123@yahoo.com">17600362123@yahoo.com</a></p><h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><p>男 未婚</p><p>27岁</p><p>沈阳大学/本科</p><p>工作经验：4年</p><p>现居住地： 北京</p><p>户口所在地：辽宁-葫芦岛</p><p>求职意向 偏向于go</p><p>期望工作性质 : 全职</p><p>期望月薪 : 35k/月</p><p>期望从事行业 : 计算机软件</p><p>期望从事职业 : 软件开发</p><p>期望工作地点 : 北京</p><p>目前状况 : 我目前处于在职</p><p>自我评价</p><ol><li>老实、踏实、认真、仔细、有责任心是我的做事方式，总会高于领导的要求来严格要求自己，对领导分配的任务能高效及时的完成。</li><li>抗压能力、自学能力强，对在开发中用到的新技术、疑难问题，能够快速的从网上或其他地方获取解决办法，有自己的学习笔记，乐于技术分享</li><li>能指导初级、中级工程师进行开发。</li><li>对工作负责，有集体荣誉感，任劳任怨。</li><li>热爱学习，热衷于技术，经常学习新技术补充自己。</li><li>有带领团队的经验（5-8人）</li><li>对于容器化的部署有丰富的经验</li></ol><h2 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h2><h3 id="2018-7月至今北京小熊博望（百度国际化）"><a href="#2018-7月至今北京小熊博望（百度国际化）" class="headerlink" title="2018.7月至今北京小熊博望（百度国际化）"></a>2018.7月至今北京小熊博望（百度国际化）</h3><h3 id="2017-10月2018-7中国中煤能源股份有限公司"><a href="#2017-10月2018-7中国中煤能源股份有限公司" class="headerlink" title="2017.10月2018.7中国中煤能源股份有限公司"></a>2017.10月2018.7<a href="https://www.baidu.com/link?url=LvM0KE2SlhWwuukv0f2xuySMWmdIx4Qe1WzDvim-m7UkX_HB1ZCZ2muEUsOyB_fE&wd=&eqid=ae8224ba0003a119000000035b4ad478">中国中煤能源股份有限公司</a></h3><p>###2016.3月2017.9北京智慧流科技教育有限公司</p><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><p><strong>2018.7-至今</strong></p><p>Meet （视频聊天 reslet netty） </p><p>Sleepiness （轻应用类 springboot）</p><p>SleepinessCMS （sleepiness的cms平台 Vue）</p><p>MaterialPlatform （轻应用类 springboot）</p><p>MaterialPlatformCMS （贴纸平台的cms  Vue）</p><p>输入法主题自动打包 （小工具类 内部使用 Go）</p><p>壁纸SDK (轻应用类 Go)</p><p>壁纸SDKCMS (壁纸cms Vue)</p><p>生酮饮食 (轻应用类 Go)</p><p>场景化sdk （小工具类 Go）</p><p>海外赚 （轻应用类Go）</p><p>海外赚CMS （轻应用类Go 开发中）</p><p>luck-quiz (轻应用类Go)</p><p>新meet(java)</p><p><strong>2017.10月-2018.7</strong></p><p>Itzh集团的ERP系统 （企业内部管理系统ssm ext）</p><p><strong>2016.10-2017.9</strong></p><p>陕旅英语（k12 dubbo）</p><p>闽教英语（k12 dubbo）</p><p>湘少英语（k12 dubbo）</p><p>粤人英语（k12 dubbo）</p><p>课堂宝 （素材资源上传平台）</p><p><strong>在国际化工作描述 :</strong> </p><ol><li>负责国际化出海产品的开发</li><li>老百度国际化项目的迁移</li><li>Elk集群的部署和维护</li><li>实时分析公司各个产品线的pv、uv 、接口超时情况、日志error报警</li><li>代码review及优化</li><li>线上项目的维护</li><li>Springboot 和golang 对小工具、轻应用产品的开发</li><li>使用AWS CI/CD，云容器的部署、服务上线</li><li>技术分享</li><li>把控各个产品线的工作进度，确保主要产品线的正常迭代&amp;注意组员的工作状态</li><li>负责对招聘新员工进行面试及安排</li></ol><p><strong>meet项目描述</strong> </p><p>这个项目是海外的视频语音聊天软件，由于是全球范围内都有普及，用户可以相互视频或者语音聊天，所以引发了用户的很高兴趣，为了提高用户的体验，缓存用户的数据结构改为了redis hash（对uid取模来分shard），为了可以多条件筛选附近的聊天室，选取了用mongodb来对聊天室进行geo 建模，对于多种匹配策略，复用了工厂的设计模式，通过这个项目的开发，学习了很多，深入的明白了如何写出高质量的代码，实现需求功能如何做技术选型，熟练的使用shell编写脚本，来计算pv uv，编写定时任务（后期我搭建了elastic集群，能够实时的收集各个产品的日志，图形化的展示产品的健康情况，对于错误日志和接口的响应情况进行分析，能够及时发送给rd），后期优化为视频聊天，提供主播对用户一对一服务的聊天、通过对主播的录屏、接通时长还有接通率来给主播进行打分，实现流量倾斜，通过一些假用户的消息下发来吸引用户付费。 目前日pv1400w的pv ，项目部署再aws的eks上，通过pod的性能参数、来考虑是否要增加机器。</p><p><strong>luckquiz项目描述</strong></p><p> 这个是一个基于beego开发的项目，有答题、刮卡、乐透、幸运转盘的小游戏，初期是吸引用户玩游戏来消耗金币、然后通过开广告来获取奖励的生态模式来运作。通过aes对用户和时间戳来加密生成验证用户有效性的token、像答题、刮卡、转盘每天玩的次数都是有次数限制的、而且奖励的金币概率和中奖概率也需要随时用户金币数和现金数的增加而改变。其中答题要求下发给用户的题目信息不允许有重复的，</p><p>方案一： 使用mysql not in（性能太差）<br>方案二： 了解到 其实是给用户下发的题目和题库的题目做差集，使用redis sdiff 命令 redis key是这样的，因为sdiff key1 key2 ，<br>key1 key2 如果不在同一个slot上，就会发出redis 错误，所以开始用{}，先计算key的hash，将answer 用{}括起来，使其<br>落在同一个slot上,题库的题目 {answer}:load-questions:%questionType ,用户看过的题目 {answer}:load-questions-by:%userId<br>能到达预期目的<br>方案三： 方案二虽然能达到预期目的，但是随着用户量的增加、单个slot的容量总是有限的，所以在用户注册的时候，给每个用户都会将题库复制一份，<br>rediskey 与userId进行绑定,题库的题目 answer:load-questions:{userId}:questionType ,用户看过的题目 answer:load-questions-by:{userId}<br>这样解决了单个slot内存过于庞大的问题这个还有一个好处就是差集的计算都交给了redis 的机器去操作<br>方案四：使用bitset 指令 SETBIT key offset value 复杂度 O(1)<br>一个bit位来表示某个元素对应的值或者状态,其中的key就是对应元素本身。我们知道8个bit可以组成一个Byte，所以bitmap本身会极大的节省储存空间。之前存储一个questionId是int64类型 ，大概的空间占用计算公式是：($offset/8/1024/1024)MB，也就是说8388608 个题目在redis里才会占用1mb的内存空间， offset 标识题目id，0 标识未打过，1标识已经答过</p><p><strong>2017.10-月2018.7</strong></p><p><strong>在中煤工作描述 :</strong> </p><ol><li>负责企业内部网站的开发</li><li>对接口的性能进行自测，并对代码调优。</li><li>相关模块接口的开发和单元测试</li><li>代码review</li><li>线上项目的维护&amp;项目进度的推进</li><li>和项目经理确定需求可行性。</li></ol><p><strong>项目描述 :</strong></p><p>这个项目是做集团的ERP系统，这个项目极大的提高了部门领导对项目的审核效率和对资产预算的评估情况，以及资产管理部门对资产分配的了解，项目处对各个项目详细信息的控制情况。 这个项目涉及了资产模块、项目模块和采购模块这三个主要功能、</p><p>个人承担对项目模块的全部开发。这个项目采用的是Ssm架构、通过对mybatis-generator开源框架的修改、自动化生成了对表的业务逻辑的正删改查、和接口的自动化测试脚本和junit测试实例、因为这个项目是企业的办公软件、大多数业务逻辑都是围绕对表的增删改查、</p><p>所以大大的减轻了开发的时间、提高了开发效率。 这个项目的亮点就是解耦很成功、三个主要功能都可以各自拆分开来、整个项目采用的是前后端分离的开发模式、大大的提高了开发效率。通过这个项目我学到了工作流的开发、更重要的是和小组人员的及时沟通</p><p>能减少不必要的开发上的错误、也能提高工作效率、再一次的认识到在开发前小组讨论对业务的熟悉对开发而言的重要及必要性。而且在讨论中能够对自己想法淬炼、增强思维的严谨性。</p><p><strong>项目描述 :</strong> </p><p>专业技能</p><ul><li>微服务的两个派系 阿里系的dubbo 和SpringCloud栈系的SpringBoot。</li><li>云服务      aws 、huawei CI/CD ，docker 和k8s的使用 </li><li>熟练在Linux系统上开发，编写shell脚本</li><li>java golang  python nodejs     </li><li>基本框架 Spring SpringMvc Mybatis Hebinate     JPA vue beego </li><li>服务治理：zookeper </li><li>请求治理：nginx、elb、nlb</li><li>数据库：mysql 、redis 、mangodb、elasticearch oracle sqlserver、sql优化</li><li>前端：html5(熟悉) extjs、jquery、jsp</li><li>高并发基本技能：队列 多线程 </li><li>网络通信：netty 、socket</li><li>爬虫 （jsoup、python）</li></ul><p><strong>教育经历</strong></p><p><strong>2013.09-2017.06</strong> <strong>沈阳大学 |</strong> <strong>计算机科学与技术 |**</strong>本科**</p><p>所获证书</p><ul><li>全国大学生创新创业训练计划项目 国家三等奖</li><li>辽宁省创青春大学生创业比赛  银奖</li><li>辽宁省计算机软件设计大赛-外包组三等奖</li><li>沈阳大学计算机软件设计竞赛 一等奖</li><li>互联网+大学生创新创业大赛     一等奖</li><li>大学生移动应用开发大赛 三等奖</li><li>大学英语四级</li></ul><p>语言能力</p><p><strong>英语 :</strong> <strong>读写能力良好 |</strong> <strong>听说能力良好</strong></p><p><strong>其他：优秀毕业生</strong> <strong>答辩成绩 94</strong></p><p> 孟凡星</p><p>电话：17600362123</p><p>邮箱：<a href="mailto:nizhidaoIEdeyisima@gmail.com">nizhidaoIEdeyisima@gmail.com</a>  <a href="mailto:17600362123@yahoo.com">17600362123@yahoo.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;孟凡星&lt;/p&gt;
&lt;p&gt;电话：17600362123&lt;/p&gt;
&lt;p&gt;邮箱：&lt;a href=&quot;mailto:nizhidaoIEdeyisima@gmail.com&quot;&gt;nizhidaoIEdeyisima@gmail.com&lt;/a&gt;  &lt;a href=&quot;mailto:17600
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
