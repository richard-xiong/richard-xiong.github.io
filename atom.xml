<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XingServer</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://richard-xiong.github.io/"/>
  <updated>2020-10-19T14:02:25.307Z</updated>
  <id>https://richard-xiong.github.io/</id>
  
  <author>
    <name>Richard</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis</title>
    <link href="https://richard-xiong.github.io/2020/10/15/redis/"/>
    <id>https://richard-xiong.github.io/2020/10/15/redis/</id>
    <published>2020-10-15T10:39:44.000Z</published>
    <updated>2020-10-19T14:02:25.307Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis的数据结构和编码"><a href="#redis的数据结构和编码" class="headerlink" title="redis的数据结构和编码"></a>redis的数据结构和编码</h3><img src="/images/redis/image-20201015114538604.png" alt="image-20201015114538604" style="zoom:50%;" /><p>可以使用OBJECT ENCODING</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SET msg <span class="string">&quot;hello wrold&quot;</span></span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> OBJECT ENCODING msg</span></span><br><span class="line">&quot;embstr&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SET story <span class="string">&quot;long long long long long long ago ...&quot;</span></span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> OBJECT ENCODING story</span></span><br><span class="line">&quot;raw&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SADD numbers 1 3 5</span></span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> OBJECT ENCODING numbers</span></span><br><span class="line">&quot;intset&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SADD numbers <span class="string">&quot;seven&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> OBJECT ENCODING numbers</span></span><br><span class="line">&quot;hashtable&quot;</span><br></pre></td></tr></table></figure><ul><li><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>字符串类型的内部编码有3种：</p><ul><li>int：8个字节的长整型。</li><li>embstr：小于等于39个字节的字符串。</li><li>raw：大于39个字节的字符串。</li></ul><p>Redis会根据当前值的类型和长度决定使用哪种内部编码实现。</p><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>哈希类型的内部编码有两种：</p><ul><li><p>ziplist（压缩列表）：</p><p>条件：</p><ol><li>当哈希类型元素个数小于hash-max-ziplist-entries配置（默认512个）</li><li>所有值都小于hash-max-ziplist-value配置（默认64字节）</li></ol></li><li><p>hashtable（哈希表）：当哈希类型无法满足ziplist的条件时使用hashtable</p></li></ul><p>Redis使用ziplist作为哈希的内部实现，ziplist使用更加紧凑的结构实现多个元素的连续存储，所以在节省内存方面比hashtable更加优秀。</p><p>使用hashtable作为哈希的内部实现，ziplist的读写效率会下降，而hashtable的读写时间复杂度为O（1）。</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>列表类型的内部编码有两种。</p><ul><li>ziplist（压缩列表）：当列表的元素个数小于list-max-ziplist-entries配置（默认512个），同时列表中每个元素的值都小于list-max-ziplist-value配置时（默认64字节），Redis会选用ziplist来作为列表的内部实现来减少内存的使用。</li><li>inkedlist（链表）：当列表类型无法满足ziplist的条件时，Redis会使用linkedlist作为列表的内部实现。</li></ul><p>提示：</p><p>Redis3.2版本提供了quicklist内部编码，简单地说它是以一个ziplist为节点的linkedlist，它结合了ziplist和linkedlist两者的优势，为列表类型提供了一种更为优秀的内部编码实现，它的设计原理可以参考Redis的另一个作者Matt Stancliff的博客：<a href="https://matt.sh/redis-quicklist">https://matt.sh/redis-quicklist</a> 。</p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>集合类型的内部编码有两种：</p><ul><li>intset（整数集合）：当集合中的元素都是整数且元素个数小于set-max-intset-entries配置（默认512个）时，Redis会选用intset来作为集合的内部实现，从而减少内存的使用。</li><li>hashtable（哈希表）：当集合类型无法满足intset的条件时，Redis会使用hashtable作为集合的内部实现。</li></ul><h2 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h2><p>有序集合类型的内部编码有两种：</p><ul><li>ziplist（压缩列表）：当有序集合的元素个数小于zset-max-ziplist-entries配置（默认128个），同时每个元素的值都小于zset-max-ziplist-value配置（默认64字节）时，Redis会用ziplist来作为有序集合的内部实现，ziplist可以有效减少内存的使用。</li><li>skiplist（跳跃表）：当ziplist条件不满足时，有序集合会使用skiplist作为内部实现，因为此时ziplist的读写效率会下降。</li></ul></li></ul><h4 id="单线程为什么这么快？"><a href="#单线程为什么这么快？" class="headerlink" title="单线程为什么这么快？"></a>单线程为什么这么快？</h4><ol><li>存内存 大概是100纳秒 （主要原因）</li><li>非阻塞io</li><li>减少了多线程的切换和竟态消耗 ，多线程如果没有合理使用会比单线程还慢</li></ol><h4 id="需要注意哪些："><a href="#需要注意哪些：" class="headerlink" title="需要注意哪些："></a>需要注意哪些：</h4><ol><li><p>一次只运行一次命令</p></li><li><p>拒绝慢命令 keys flush flushdb，slow lua script 。mutil/exec operate big value（Collection）</p></li><li><p>redis 其实不是单线程，再执行下面操作的时候都是有单独线程去执行的</p><p>​    fysnc file descriptor</p><p>​    close file descriptor</p></li><li><p>redis的key和string类型的value都限制为512MB</p></li></ol><h2 id="Redis-Api的使用和理解"><a href="#Redis-Api的使用和理解" class="headerlink" title="Redis Api的使用和理解"></a>Redis Api的使用和理解</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ol><li><h5 id="结构和命令"><a href="#结构和命令" class="headerlink" title="结构和命令"></a>结构和命令</h5><p>​    key value 结构</p><p>​    value的值 可以是字符串 数值 也可以是位图   最大的值有限制是512MB</p><ol><li><p>场景：</p><ol><li>缓存</li><li>计数器</li><li>分布式锁</li><li>。。。</li></ol></li><li><p>命令</p><p>get key O(1)</p><p>set key value O(1)</p><p>delete key O(1)</p><p>incry key  # key自增1 如果不存在，以0为起点 O(1)</p><p>decr key  #key 自减  O(1)</p><p>incrby  key k # key 自增k，如果不存在 ,自增后get(key)=k  O(1)</p><p>decrby key k  #   key 自减k，如果不存在 ,自增后get(key)=-k  O(1)</p></li><li><p>快速实战</p><ol><li><p>实现如下功能：</p><p>​    记录网站每个用户个人主页的访问量？</p><p> incr userid:pageview (单线程：无竞争) </p></li><li><p>缓存视频的基本信息（数据源再mysql中）伪代码</p><img src="/images/redis/image-20201015142830668.png" alt="image-20201015142830668" style="zoom: 33%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> VideoInfo <span class="title">get</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">    String redisKey = redisPrefix+id</span><br><span class="line">  VideoInfo videoInfo = redis.get(redisKey);</span><br><span class="line">  <span class="keyword">if</span> (videoInfo==<span class="keyword">null</span>)&#123;</span><br><span class="line">    videoInfo=mysql.get(id)&#123;</span><br><span class="line">      <span class="keyword">if</span> (videoInfo!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">            redis.set(redisKey,searialize(videoInfo))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> videoInfo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><pre><code>  3. 分布式的id生成器     &lt;img src=&quot;/images/redis/image-20201015144059614.png&quot; alt=&quot;image-20201015144059614&quot; style=&quot;zoom:33%;&quot; /&gt;     incr key    4.  set  setnx  setxx     ​    set key value # 不管key是否存在都设置 O(1)     ​    setnx key value # key 不存在才设置 O(1)     ​    set key value xx #  key 存在才设置 O(1)  5. mget  mset     ​    mget key1 key2 key3 #批量获取key 原子操作 O(n)     ​    mset key1 value1 key2 value2 key3 value3 # 批量设置key value O(n)     &lt;img src=&quot;/images/redis/image-20201015145748466.png&quot; alt=&quot;image-20201015145748466&quot; style=&quot;zoom:25%;&quot; /&gt;  &lt;img src=&quot;/images/redis/image-20201015145832158.png&quot; alt=&quot;image-20201015145832158&quot; style=&quot;zoom:25%;&quot; /&gt;#### 内部编码  4. #### 查缺补漏     1. getset 、append 、strlen        getset key newvalue # set key newvalue 并返回久的value   O(1)        append key value # 将value追加到旧的value O(1)        strlen key # 返回字符串的长度（注意中文） O(1)  utf8 中文占用两个字节     2.  incrbyfloat getrange setrange        incrbyfloat key 3.5 #增加kkey对应的值是3.5 O(1)        getrange key start end # 获取字符串指定下标的所有的值  O(n)        setrange key index value # 设置指定下标所有对应的值  O(n)</code></pre><ol start="2"><li><h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><h4 id="1、hash键值的结构"><a href="#1、hash键值的结构" class="headerlink" title="1、hash键值的结构"></a>1、hash键值的结构</h4><p>​        key   filed value    filed 可以理解为属性  value 是属性值    </p><img src="/images/redis/image-20201015152852586.png" alt="image-20201015152852586" style="zoom:25%;" /><h4 id="2、-特点"><a href="#2、-特点" class="headerlink" title="2、 特点"></a>2、 特点</h4><p>​    Mapmap？map的map   key对应的是一个map  filed和value也像是一个map   </p><p>​    SmallRedis  引号的 可以理解为上面</p><p>​    filed 不能相同 value 可以相同</p><h4 id="3-、重要的api"><a href="#3-、重要的api" class="headerlink" title="3 、重要的api"></a>3 、重要的api</h4><ol><li><p>​    hget hset hdel</p><p>​    hget key filed # 获取hash key对应filed的value O(1) </p><p>​    hset key filed value # 设置hash key 对应field 的value  O(1)</p><p>​    hdel key field # 删除hash key 对应filed的value  O(1)</p></li><li><p>hexists hlen </p><p>​    hexists  key filed # 判断hash key 是否有field O(1) </p><p>hlen key # 获取hash key field的数量 O(1) </p></li><li><p>hmegt  hmset</p><p>​    hmget key filed1 field2 … filedN # 批量获取hash key的一批field的值  O(n)</p><p>​    hmset key filed1 value1 field2 value2 …filedN valueN # 批量设置hash key的一批field value O(n) </p></li></ol><h4 id="4、-实战"><a href="#4、-实战" class="headerlink" title="4、 实战"></a>4、 实战</h4><ol><li><p>​    记录网站每个用户个人主页的访问量</p><p>​    hincrby user:1:info pageview count</p></li><li><p>缓存视频的基本信息 伪代码    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> VedioInfo <span class="title">get</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">  String redisKey = redisPrefix + id</span><br><span class="line">  Map&lt;String,String&gt; hashMap = redis.getAll(redisKey)</span><br><span class="line">  VideoInfo videoInfo = transferMapToVideo(hashMap)</span><br><span class="line">  <span class="keyword">if</span> videoInfo == <span class="keyword">null</span> &#123;</span><br><span class="line">        videoInfo = mysql.get(id)</span><br><span class="line">      <span class="keyword">if</span> videoInfo != <span class="keyword">null</span> &#123;</span><br><span class="line">        redis.hmset(redisKey,transVideoToMap(videoInfo))</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> videoInfo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>hgetall hvals  hkeys</p><p>hgetall key # 返回对应key的所有field和value O(n) </p><p>hvals key # 返回对应key的所有field的values O(n) </p><p>hkeys key # 返回对应key的所有field  O(n) </p><p>小心使用hgetall 因为redis是单线程  否则会阻塞操作</p></li><li><p>更新用户信息</p><ol><li>string key  user存储    key value是整个用户信息</li><li>string  key:用户属性  value:属性值</li><li>hash  key field 是用户属性 value  属性值</li></ol><img src="/images/redis/image-20201015174305567.png" alt="image-20201015174305567" style="zoom:25%;" /></li></ol></li></ol><h4 id="5、查缺补漏"><a href="#5、查缺补漏" class="headerlink" title="5、查缺补漏"></a>5、查缺补漏</h4><ol><li><p>hsetnx hincrby hincrbyfloat</p><p>​    hsetnx key field value # 设置hash key对应field的value 如果field已经存在则失败 O(1)</p><p>​    hincrby key field intCounter # hash key对应的field的value自增intCounter  O(1) </p><p>​    hincrbyfloat key field floatCounter  # hash key对应的field的value自增loatCounter  O(1)</p></li></ol><ol start="3"><li><h2 id="list-1"><a href="#list-1" class="headerlink" title="list"></a>list</h2><ol><li><h4 id="列表结构"><a href="#列表结构" class="headerlink" title="列表结构"></a>列表结构</h4><p>​    key  elements</p></li><li><h4 id="重要api"><a href="#重要api" class="headerlink" title="重要api"></a>重要api</h4><p>​    rpush key value1 value2 … valueN #从列表右端插入值(1-n个) O(n)</p><p>​    lpush key value1 value2 … valueN # 从列表左端插入值(1-n个) O(n)</p><p>​    linsert key before|after value newValue #在list指定的值 前|后插入newValue O(n)</p><p>​    lpop key # 从list左边弹出一个item</p><p>​    rpop key # 从list右边弹出一个item</p><p>​    lrem key count value # 根据count的值，从列表中删除所有与value相等的项 O(n)</p><ol><li>count&gt;0 从左到右，删除最大count个与value相等的项</li><li>count&lt;0 从右到左，删除最大count个与value相等的项</li><li>count=0 删除所有与value相等的项</li></ol><p>​    ltrim key start end # 按照索引范围修剪列表 O(n)</p><p>​    lrange key start end（包含end）# 获取列表指定范围的所有item O(n)</p><p>​    lindex key index # 获取列表指定索引的值 O(n)</p><p>​    llen key # 获取列表的长度 O(1)</p><p>​    lset key index newValue # 设置列表指定索引的值为newValueO(n)</p><h4 id="3-实战场景"><a href="#3-实战场景" class="headerlink" title="3.实战场景"></a>3.实战场景</h4><p>​    时间轴 timeline</p><h4 id="4-查缺补漏"><a href="#4-查缺补漏" class="headerlink" title="4.查缺补漏"></a>4.查缺补漏</h4><p>​    blpop brpop</p><ol><li>​    blpop key timeout # lpop阻塞版本，timeout是阻塞超时时间，timeout=0 为永远不阻塞</li><li>brpop key timeout # rpop阻塞版本，timeout是阻塞超时时间，timeout=0 为永远不阻塞</li></ol><h5 id="5-tips"><a href="#5-tips" class="headerlink" title="5. tips"></a>5. tips</h5><ol><li>​    LPUSH + LPOP = Stack</li><li>​    LPUSH + RPOP = Quene</li><li>LPUSH + LTRIM = Cappend Collection 固定大小的集合</li><li>LPSUH + BRPOP = Message Quene </li></ol></li></ol></li><li><p>set</p><ol><li><p>集合结构</p><p>​    key  values</p></li><li><p>特点</p><ol><li>无序</li><li>无重复</li><li>集合间的操作</li></ol></li><li><p>api</p><ol><li><p>sadd  srem</p><p>sadd key element  #向集合key添加element（如果element已经存在 添加失败） O(1)</p><p>srem key element  # 将集合key中element移出掉  O(1)</p></li><li><p>scard、sismember 、srandmember、 smembers</p><p>scard key # 计算 集合的大小</p><p>sismember key element # 判断element是否在集合key中存在</p><p>srandmember key count # 从集合中随机挑选count个元素  </p><p>spop key # 从集合中随机弹出一个元素 （弹出之后 集合中不存在这个元素了）</p><p>smembers key # 返回集合中所有元素 </p><ol><li>无序</li><li>小心使用 集合多会阻塞队列</li></ol></li><li><p>集合内实战</p><ol><li><p>抽奖系统</p><p>​    可以借助srandmember 或者spop来实现</p></li><li><p>like 赞 踩</p></li><li><p>添加标签 </p></li></ol></li><li><p>集合间的使用</p><ol><li>sdiff sinter sunion</li></ol><p>​    sdiff key1 key2 # 算出两个集合的差集</p><p>​    sinter key1 key2 # 算出两个集合的交集</p><p>​    sunion key1 key2 # 算法两个集合的并集</p></li><li><p>tips</p><p>sadd = 添加标签</p><p>spop /srandMember = 获取随机数</p><p>sadd + sinter = 做一些社交相关的业务</p></li></ol></li></ol></li><li><p>list 有序集合</p><ol><li><p>结构</p><p>​    key score value</p></li><li><p>特点</p><ol><li>无重复元素</li><li>有序</li><li>element score</li></ol></li><li><p>重要api</p><ol><li>zadd key score element # 添加元素（可以是多对 score 可以重复 element不能重复）O(logN)</li><li>zrem key element # 删除元素 可以多个 O(1)</li><li>zscore key element # 返回元素的分数 O(1) </li><li>zincrby key increSocre element  # 增加或减少element的分数 O(1)</li><li>zcard key # 返回元素的总个数   O(1)</li><li>zrank key element # 获取element在集合中的排名  ，从小到大 起点是0  O(1)  </li><li>zrange key start end 【withscores】 # 返回指定索引范围内的升序元素， 按照排名进行排序 O(logN + m)  </li><li>zrangebyscore key minScore maxScore withscores】  # 返回指定分数范围内的升序元素【分值】，按照分值进行排序   O(logN + m)  </li><li>zcount key minScores maxScore # 返回有序集合内在指定分数范围的个数 O(logN + m)  </li><li>zremrangebyrank key start end # 删除指定排名内的升序元素 O(logN + m)  </li><li>zremrangebyscore by minScore maxScore # 删除指定分值内的升序元素 O(logN + m)  </li></ol></li><li><p>实战</p><ol><li>排行榜 </li></ol></li><li><p>查缺补漏</p><ol><li>zrevrank  </li></ol></li></ol></li></ol><h2 id="瑞士军刀-redis"><a href="#瑞士军刀-redis" class="headerlink" title="瑞士军刀 redis"></a>瑞士军刀 redis</h2><h3 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h3><ol><li><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ol><li>过程  发送 排队 执行 返回结果</li><li>慢查询是发生在第三阶段 </li><li>客户端超时不一定慢，但慢查询是客户端超时的一个可能因素</li></ol></li><li><h4 id="两个配置"><a href="#两个配置" class="headerlink" title="两个配置"></a>两个配置</h4><ol><li><p>slowlog-max-len</p><ol><li><p>先进先出的队列</p></li><li><p>固定长度</p></li><li><p>保存在内存内  </p><img src="/images/redis/image-20201016175532537.png" alt="image-20201016175532537" style="zoom: 50%;" /></li></ol></li><li><p>slowlog-log-slower-than</p><ol><li>慢查询的阈值（单位：微秒）</li><li>slowlog-log-slower-than=0 记录所有的命令 ps（因为客户端不会显示执行的时间，这时候可以将改配置记录为0 ，然后看一下慢查询中执行的时间）</li><li>slowlog-log-slower-than&lt;0 不记录任何命令</li></ol></li><li><p>配置方法</p><ol><li><p>默认值</p><ol><li>config get slowlog-max-len= 128 默认值 </li><li>config get slowlog-log-slower-than=10000 10ms</li></ol></li><li><p>修改配置文件重启（不推荐）</p></li><li><p>动态配置</p><ol><li>config set slowlog-max-len 1000</li><li>config set slowlog-log-slower-than=1000</li></ol></li></ol></li></ol></li></ol><ol start="3"><li><h4 id="三个命令"><a href="#三个命令" class="headerlink" title="三个命令"></a>三个命令</h4><ol><li>slowlog get [n] : 获取慢查询队列</li><li>showlog len ： 获取慢查询队列的长度</li><li>showlog reset ： 清空慢查询队列</li></ol></li><li><h4 id="运维经验"><a href="#运维经验" class="headerlink" title="运维经验"></a>运维经验</h4><ol><li>slowlog-max-len 不要设置的过大，slowlog-log-slower-than默认是10ms，通常设置为1ms</li><li>slowlog-log-slower-than 不要设置的过小，通常设置在1000左右</li><li>理解命令的生命周期</li><li>定期持久化慢查询（因为慢查询是存在内存当中的，这样我们就能查到历史的慢查询，这些数据是非常重要的，可以使用一些开源的第三方方法来实现这个功能）</li></ol><h3 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h3></li><li><p>什么是流水线</p><ol><li><p>正常redis执行一条命令的时间= 客户端发送请求和获取请求算一次网络时间，+ 一次命令在客户端执行的时间</p><p>如果多次执行redis 命令就会浪费很多网络时间，所以我们将多次命令可以打包成pipeline，然后在服务端计算n次</p><p>将结果顺序返回，这样</p><p>1次pipeline(n条命令)=1次网络时间+ n次命令执行时间</p><p>注意：</p><p>​        redis的命令时间是微秒级别的</p><p>​        pipeline每次条数要控制（网络）</p></li></ol></li><li><p>客户端实现</p></li><li><p>与原生操作对比</p><ol><li>他不是原子操作</li><li>客户端将pipeline的命令发送到服务端之后 会将pipeline中的命令进行拆分的</li></ol></li><li><p>使用建议</p><ol><li>注意每次pipeline携带的数据量</li><li>pipeline每次只能作用在一个redis节点上</li><li>M操作与pipeline的区别</li></ol><h3 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h3></li><li><p>角色</p><ol><li>发布者 publisher</li><li>订阅者 subscriber</li></ol><h3 id="bitmap"><a href="#bitmap" class="headerlink" title="bitmap"></a>bitmap</h3><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><h3 id="Geo"><a href="#Geo" class="headerlink" title="Geo"></a>Geo</h3></li></ol><h3 id="开发运维常见问题"><a href="#开发运维常见问题" class="headerlink" title="开发运维常见问题"></a>开发运维常见问题</h3><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><ol><li><h4 id="命令实现"><a href="#命令实现" class="headerlink" title="命令实现"></a>命令实现</h4><ol><li>slaveof  ip port    </li><li>取消复制<ol><li>slaveof no more 不在成为从节点</li><li>slave-read-only yes 只做读操作 </li></ol></li></ol></li><li><p>配置</p></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;redis的数据结构和编码&quot;&gt;&lt;a href=&quot;#redis的数据结构和编码&quot; class=&quot;headerlink&quot; title=&quot;redis的数据结构和编码&quot;&gt;&lt;/a&gt;redis的数据结构和编码&lt;/h3&gt;&lt;img src=&quot;/images/redis/image
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Golang小技巧-自定义三元表达式</title>
    <link href="https://richard-xiong.github.io/2020/10/15/Golang%E5%B0%8F%E6%8A%80%E5%B7%A7-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%89%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://richard-xiong.github.io/2020/10/15/Golang%E5%B0%8F%E6%8A%80%E5%B7%A7-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%89%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-10-15T10:29:33.000Z</published>
    <updated>2020-10-15T02:30:34.222Z</updated>
    
    <content type="html"><![CDATA[<p>三元表达式的介绍在这里:</p><ul><li><a href="http://en.wikipedia.org/wiki/%3F">http://en.wikipedia.org/wiki/%3F</a>:</li><li><a href="http://en.wikipedia.org/wiki/IIf">http://en.wikipedia.org/wiki/IIf</a></li></ul><p>Go语言明确不支持三元表达式，这里是相关的讨论：<br><a href="https://groups.google.com/d/msg/golang-nuts/dbyqx_LGUxM/tLFFSXSfOdQJ">https://groups.google.com/d/msg/golang-nuts/dbyqx_LGUxM/tLFFSXSfOdQJ</a></p><p>官方FAQ的说明在这里：<br><a href="http://golang.org/doc/faq#Does_Go_have_a_ternary_form">http://golang.org/doc/faq#Does_Go_have_a_ternary_form</a></p><p>官方FAQ推荐的做法是用 <code>if</code> 代替：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expr &#123;</span><br><span class="line">    n = trueVal</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    n = falseVal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过用 <code>if</code> 的问题是变量 <code>n</code> 有作用域问题.<br>我们需要在 <code>if</code> 之前先定义变量 <code>n</code>，这样才可以在 <code>if</code> 语句之后使用变量 <code>n</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n <span class="keyword">int</span></span><br><span class="line"><span class="keyword">if</span> expr &#123;</span><br><span class="line">    n = trueVal</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    n = falseVal</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println</span>(n)</span><br></pre></td></tr></table></figure><p>本来一个简单的 <code>n := expr? trueVal: falseVal</code> 就能够表达的问题，变的复杂了很多。<br>这和Go所追求的简单思路是有冲突的。</p><p>类似的有 <code>max</code>/<code>min</code> 等函数。因为这类函数使用频度比较高，在很多pkg的内部都定义了私有的实现。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>熟悉Go语言的用户应该可以发现，这个 <code>max</code> 只支持 <code>int</code> 类型。<br>对于支持泛型的C++语言来说，<code>max</code> 一般被实现为一个模板函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line"><span class="keyword">const</span> T&amp; max (<span class="keyword">const</span> T&amp; a, <span class="keyword">const</span> T&amp; b) &#123;</span><br><span class="line">    <span class="keyword">return</span> (a&lt;b)?b:a;     <span class="comment">// or: return comp(a,b)?b:a; for version (2)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在C++版本中，不仅用到的泛型<code>T</code>，还依赖 <code>a&lt;b</code> 的运算符重载特性。<br>在C语言中，虽然没有泛型和运算符重载，但是三元表达式也具备全部的特性（因为表达式天生就是支持泛型的）。</p><p>而这些都是Go语言中缺少的特性。<br>不过在Go语言中可以模拟一个更普通的函数(<code>If</code> 的首字母大写，是函数名，不是 <code>if</code> 关键字)：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">If</span><span class="params">(condition <span class="keyword">bool</span>, trueVal, falseVal <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    <span class="keyword">if</span> condition &#123;</span><br><span class="line">        <span class="keyword">return</span> trueVal</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> falseVal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a, b := <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">max := If(a &gt; b, a, b).(<span class="keyword">int</span>)</span><br><span class="line"><span class="built_in">println</span>(max)</span><br></pre></td></tr></table></figure><p>有几个关键点：</p><ul><li>Go不支持运算符重载，因此需要先将 <code>a&lt;b</code> 在函数外转换为 <code>bool</code> 条件</li><li>Go不支持泛型，只能用 <code>interface&#123;&#125;</code> 模拟</li><li>返回的类型安全需要用户自己保证，<code>.(type)</code> 的类型必须匹配</li><li><code>interface&#123;&#125;</code> 是运行时泛型，性能没有编译时泛型高</li></ul><p>由此可见，<code>?:</code> 不仅仅是一个简单的三元表达式。其实它更像一个内置的泛型版的函数（因为表达式天生就是支持泛型的）。</p><p>期望未来的Go版本中，能完善对 <code>?:</code> 三元表达式 和 编译时的泛型 的支持。</p><p>补充：<br>星星 同学的提示：可能会导致深入嵌套的滥用： <code>c?d?e?0:1:2:3</code> 。<br>因为三元表达式是一个表达式，必然是允许嵌套的。</p><p>不过我觉得嵌套不是问题的本质，函数也能导致嵌套的滥用。<br>但是不能因为滥用的行为来排斥有存在价值的语法（比如三元表达式）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;三元表达式的介绍在这里:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/%3F&quot;&gt;http://en.wikipedia.org/wiki/%3F&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wi
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang设计模式之原型模式.md </title>
    <link href="https://richard-xiong.github.io/2020/10/15/golang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://richard-xiong.github.io/2020/10/15/golang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-10-14T17:53:03.000Z</published>
    <updated>2020-10-14T13:15:20.062Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>wiki:原型模式是创建型模式的一种，其特点在于通过“复制”一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称的“原型”，这个原型是可定制的。原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。</p></blockquote><p>这是一个十分简单的设计模式,可以看做是其他语言中的克隆方法，例如 <code>JAVA</code>/<code>PHP</code> 中都有相关方法，从一个内存中已经存在的对象中，拷贝出一个一模一样的对象来，针对复杂对象或比较大的对象，要比使用各种设计模式<code>new</code>出来的对象要快的多,</p><p>而且原型模式很少单独使用，一般与其他对象结合使用。</p><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><ol><li><p>创建一个结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  &#x2F;&#x2F; 示例结构体</span><br><span class="line">  type Example struct &#123;</span><br><span class="line">      Content string</span><br><span class="line">  &#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure></li><li><p>添加克隆方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  func (e *Example) Clone() *Example &#123;</span><br><span class="line">      res :&#x3D; *e</span><br><span class="line">      return &amp;res</span><br><span class="line">  &#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>我们仅仅一行代码就完成了值的拷贝，使用 <code>*指针</code>，直接获取了一个拷贝的值，然后将这个拷贝的值得指针返回，原理请阅读下面的扩展阅读。</p></li><li><p>编写主代码</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   func main() &#123;</span><br><span class="line">       r1 :&#x3D; new(Example)</span><br><span class="line">       r1.Content &#x3D; &quot;this is example 1&quot;</span><br><span class="line">       r2 :&#x3D; r1.Clone()</span><br><span class="line">       r2.Content &#x3D; &quot;this is example 2&quot;</span><br><span class="line">   </span><br><span class="line">       fmt.Println(r1)</span><br><span class="line">       fmt.Println(r2)</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="扩展阅读-深拷贝与浅拷贝"><a href="#扩展阅读-深拷贝与浅拷贝" class="headerlink" title="扩展阅读: 深拷贝与浅拷贝"></a>扩展阅读: 深拷贝与浅拷贝</h3><p><code>go</code> 语言中的传递都是值传递，传递一个对象，就会把对象拷贝一份传入函数中，传递一个指针，就会把指针拷贝一份传入进去。</p><p>赋值的时候也是这样，<code>res:=*e</code> 就会把传递的 <code>Example</code> 对象拷贝一份，如果是 <code>res:=e</code> 的话，那么拷贝的就是对象的指针了.</p><p>而深拷贝和浅拷贝也可以这样理解，深拷贝就是拷贝整个对象，浅拷贝就是拷贝对象指针。</p><p>对于深度拷贝，<code>go</code>和其他语言还经常使用序列化后反序列化的形式进行拷贝:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> func deepCopy(dst, src interface&#123;&#125;) error &#123;</span><br><span class="line">     var buf bytes.Buffer</span><br><span class="line">     if err :&#x3D; gob.NewEncoder(&amp;buf).Encode(src); err !&#x3D; nil &#123;</span><br><span class="line">         return err</span><br><span class="line">     &#125;</span><br><span class="line">     return gob.NewDecoder(bytes.NewBuffer(buf.Bytes())).Decode(dst)</span><br><span class="line">  &#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>实际上<code>gob</code>包序列化的时候也是用到了 <code>reflect</code>包来实现拷贝的</p><p><strong>注意:</strong> golang完全是按值传递，所以如果深度拷贝的对象中包含有指针的话，那么深度拷贝后，这些指针也会相同，会导致部分数据共享，要注意这一点.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;wiki:原型模式是创建型模式的一种，其特点在于通过“复制”一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称的“原型”，这个原型是可定制的。原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang设计模式之建造者模式</title>
    <link href="https://richard-xiong.github.io/2020/10/14/golang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://richard-xiong.github.io/2020/10/14/golang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-10-13T20:43:21.000Z</published>
    <updated>2020-10-14T09:52:11.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p><p><strong>主要解决：</strong>主要解决在软件系统中，有时候面临着”一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</p><p><strong>何时使用：</strong>一些基本部件不会变，而其组合经常变化的时候。</p><p><strong>如何解决：</strong>将变与不变分离开。</p><p><strong>关键代码：</strong>建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。</p><p><strong>应用实例：</strong> 1、去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的”套餐”。 2、JAVA 中的 StringBuilder。</p><p><strong>优点：</strong> 1、建造者独立，易扩展。 2、便于控制细节风险。</p><p><strong>缺点：</strong> 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。</p><p><strong>使用场景：</strong> 1、需要生成的对象具有复杂的内部结构。 2、需要生成的对象内部属性本身相互依赖。</p><p><strong>注意事项：</strong>与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们假设一个快餐店的商业案例，其中，一个典型的套餐可以是一个汉堡（Burger）和一杯冷饮（Cold drink）。汉堡（Burger）可以是素食汉堡（Veg Burger）或鸡肉汉堡（Chicken Burger），它们是包在纸盒中。冷饮（Cold drink）可以是可口可乐（coke）或百事可乐（pepsi），它们是装在瓶子中。</p><p>我们将创建一个表示食物条目（比如汉堡和冷饮）的 <em>Item</em> 接口和实现 <em>Item</em> 接口的实体类，以及一个表示食物包装的 <em>Packing</em> 接口和实现 <em>Packing</em> 接口的实体类，汉堡是包在纸盒中，冷饮是装在瓶子中。</p><p>然后我们创建一个 <em>Meal</em> 类，带有 <em>Item</em> 的 <em>ArrayList</em> 和一个通过结合 <em>Item</em> 来创建不同类型的 <em>Meal</em> 对象的 <em>MealBuilder</em>。<em>BuilderPatternDemo</em>，我们的演示类使用 <em>MealBuilder</em> 来创建一个 <em>Meal</em>。</p><p><img src="/images/golang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/builder_pattern_uml_diagram.jpg" alt="建造者模式的 UML 图"></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建一个表示食物条目和食物包装的接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Item <span class="keyword">interface</span> &#123;</span><br><span class="line">   GetName() <span class="keyword">string</span></span><br><span class="line">   GetPacking() Packing</span><br><span class="line">   GetPrice() <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Packing <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetPack() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>创建实现 Packing 接口的实体类。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Wrapper <span class="keyword">struct</span> &#123;</span><br><span class="line">    Pack <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Wrapper)</span> <span class="title">GetPack</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Wrapper&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bottle <span class="keyword">struct</span> &#123;</span><br><span class="line">    Pack <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Bottle)</span> <span class="title">GetPack</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Bottle&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>创建实现 Item 接口的抽象类，该类提供了默认的功能。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Burger <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Burger)</span> <span class="title">GetPacking</span><span class="params">(item Item)</span> <span class="title">Packing</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.GetPacking()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Burger)</span> <span class="title">GetPrice</span><span class="params">(item Item)</span><span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.GetPrice()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Burger)</span> <span class="title">GetName</span><span class="params">(item Item)</span><span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.GetName()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ColdDrink <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *ColdDrink)</span> <span class="title">GetPacking</span><span class="params">(item Item)</span> <span class="title">Packing</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.GetPacking()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *ColdDrink)</span> <span class="title">GetPrice</span><span class="params">(item Item)</span><span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.GetPrice()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *ColdDrink)</span> <span class="title">GetName</span><span class="params">(item Item)</span><span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.GetName()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h3><p>创建扩展了 Burger 和 ColdDrink 的实体类。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ChickenBurger <span class="keyword">struct</span> &#123;</span><br><span class="line">    Burger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *ChickenBurger)</span> <span class="title">GetPrice</span><span class="params">()</span> <span class="title">float64</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">50.5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(this *ChickenBurger)</span> <span class="title">GetName</span><span class="params">()</span><span class="title">string</span></span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Chicken Burger&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *ChickenBurger)</span> <span class="title">GetPacking</span><span class="params">()</span> <span class="title">Packing</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">new</span>(Wrapper)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> VegBurger <span class="keyword">struct</span> &#123;</span><br><span class="line">    Burger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *VegBurger)</span> <span class="title">GetPrice</span><span class="params">()</span> <span class="title">float64</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">25.0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(this *VegBurger)</span> <span class="title">GetName</span><span class="params">()</span><span class="title">string</span></span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Veg Burger&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *VegBurger)</span> <span class="title">GetPacking</span><span class="params">()</span> <span class="title">Packing</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">new</span>(Wrapper)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Coke <span class="keyword">struct</span> &#123;</span><br><span class="line">    ColdDrink</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Coke)</span> <span class="title">GetPrice</span><span class="params">()</span> <span class="title">float64</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">30.0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(this *Coke)</span> <span class="title">GetName</span><span class="params">()</span><span class="title">string</span></span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Coke&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Coke)</span> <span class="title">GetPacking</span><span class="params">()</span> <span class="title">Packing</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">new</span>(Bottle)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Pepsi <span class="keyword">struct</span> &#123;</span><br><span class="line">    ColdDrink</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Pepsi)</span> <span class="title">GetPrice</span><span class="params">()</span> <span class="title">float64</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">35.0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(this *Pepsi)</span> <span class="title">GetName</span><span class="params">()</span><span class="title">string</span></span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Pepsi&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Pepsi)</span> <span class="title">GetPacking</span><span class="params">()</span> <span class="title">Packing</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">new</span>(Bottle)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤 5"></a>步骤 5</h3><p>创建一个 Meal 类，带有上面定义的 Item 对象。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Meal <span class="keyword">struct</span> &#123;</span><br><span class="line">    Items []Item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Meal)</span> <span class="title">AddItem</span><span class="params">(item Item)</span></span> &#123;</span><br><span class="line">    this.Items = <span class="built_in">append</span>(this.Items, item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Meal)</span> <span class="title">GetCost</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> cost <span class="keyword">float64</span></span><br><span class="line">    <span class="keyword">for</span> _, item := <span class="keyword">range</span> this.Items &#123;</span><br><span class="line">        cost += item.GetPrice()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cost</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Meal)</span> <span class="title">ShowItems</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, item := <span class="keyword">range</span> this.Items &#123;</span><br><span class="line">        fmt.Print(<span class="string">&quot;Item : &quot;</span> + item.GetName())</span><br><span class="line">        fmt.Print(<span class="string">&quot;, Packing : &quot;</span> + item.GetPacking().GetPack())</span><br><span class="line">        fmt.Println(<span class="string">&quot;, Price : &quot;</span> + fmt.Sprintf(<span class="string">&quot;%f&quot;</span>, item.GetPrice()))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤 6"></a>步骤 6</h3><p>创建一个 MealBuilder 类，实际的 builder 类负责创建 Meal 对象。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetPrepareNonVegMea</span><span class="params">()</span> <span class="title">Meal</span></span> &#123;</span><br><span class="line">    meal := <span class="built_in">new</span>(Meal)</span><br><span class="line">    meal.AddItem(<span class="built_in">new</span>(ChickenBurger))</span><br><span class="line">    meal.AddItem(<span class="built_in">new</span>(Pepsi))</span><br><span class="line">    <span class="keyword">return</span> *meal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetPrepareVegMeal</span><span class="params">()</span> <span class="title">Meal</span></span> &#123;</span><br><span class="line">    meal := <span class="built_in">new</span>(Meal)</span><br><span class="line">    meal.AddItem(<span class="built_in">new</span>(VegBurger))</span><br><span class="line">    meal.AddItem(<span class="built_in">new</span>(Coke))</span><br><span class="line">    <span class="keyword">return</span> *meal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-7"><a href="#步骤-7" class="headerlink" title="步骤 7"></a>步骤 7</h3><p>BuiderPatternDemo 使用 MealBuider 来演示建造者模式（Builder Pattern）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    nonVegMeal := meal.GetPrepareNonVegMea()</span><br><span class="line">    fmt.Println(<span class="string">&quot;\\n\\nNon-Veg Meal&quot;</span>)</span><br><span class="line">    nonVegMeal.ShowItems()</span><br><span class="line">    fmt.Println(<span class="string">&quot;Total Cost: &quot;</span> + fmt.Sprintf(<span class="string">&quot;%f&quot;</span>, nonVegMeal.GetCost()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    VegMeal := meal.GetPrepareVegMeal()</span><br><span class="line">    fmt.Println(<span class="string">&quot;\\n\\nVegMeal Meal&quot;</span>)</span><br><span class="line">    VegMeal.ShowItems()</span><br><span class="line">    fmt.Println(<span class="string">&quot;Total Cost: &quot;</span> + fmt.Sprintf(<span class="string">&quot;%f&quot;</span>, VegMeal.GetCost()))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-8"><a href="#步骤-8" class="headerlink" title="步骤 8"></a>步骤 8</h3><p>执行程序，输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\n\nNon-Veg Meal</span><br><span class="line">Item : Chicken Burger, Packing : Wrapper, Price : 50.500000</span><br><span class="line">Item : Pepsi, Packing : Bottle, Price : 35.000000</span><br><span class="line">Total Cost: 85.500000</span><br><span class="line">\n\nVegMeal Meal</span><br><span class="line">Item : Veg Burger, Packing : Wrapper, Price : 25.000000</span><br><span class="line">Item : Coke, Packing : Bottle, Price : 30.000000</span><br><span class="line">Total Cost: 55.000000</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; title=&quot;建造者模式&quot;&gt;&lt;/a&gt;建造者模式&lt;/h1&gt;&lt;p&gt;建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang开发技巧-实现抽象类</title>
    <link href="https://richard-xiong.github.io/2020/10/14/golang%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7-%E5%AE%9E%E7%8E%B0%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    <id>https://richard-xiong.github.io/2020/10/14/golang%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7-%E5%AE%9E%E7%8E%B0%E6%8A%BD%E8%B1%A1%E7%B1%BB/</id>
    <published>2020-10-13T17:43:58.000Z</published>
    <updated>2020-10-13T09:45:14.608Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了一种通过 struct 和 interface 来在 golang 中实现抽象类的方式。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Java 这种面向对象的语言中，抽象类和接口是我们经常会运用到的 2 种对抽象概念进行定义的机制。在 golang 中，没有类和继承的概念。golang 中有结构体（struct），和面向对象语言中的类相似。golang 中也有接口（interface），接口可以定义一组不含有具体实现的方法，其提供了一种方式来说明对象的行为。</p><p>然而，在某些情况下，我们需要使用抽象类继承，来帮助我们写出更优雅的代码。可是在 golang 中又没有抽象类的概念，本文将介绍一种通过 struct 和 interface 来在 golang 中实现抽象类的方法。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先，我们会用 Java 语言作为示例，来看看如何在面向对象语言中实现抽象类。接着换 golang 语言，通过 struct 和 interface 来实现抽象类，完成相同的功能。</p><h4 id="面向对象语言中抽象类的实现"><a href="#面向对象语言中抽象类的实现" class="headerlink" title="面向对象语言中抽象类的实现"></a>面向对象语言中抽象类的实现</h4><p>假设我们需要实现下面这样的几个类（使用 Java 为例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name() + <span class="string">&quot; is awesome!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dota</span> <span class="keyword">extends</span> <span class="title">Game</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dota&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LOL</span> <span class="keyword">extends</span> <span class="title">Game</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;LOL&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义了 Game 抽象类，在此类中定义了 <code>public abstract String name();</code> 一个抽象方法和 <code>public void play()</code> 这样一个公开方法。然后我们定义了 <code>Dota</code> 和 <code>LOL</code> 2个类去继承 <code>Game</code>，并各自实现了 <code>public String name()</code>。</p><p>接下来让我们看看如何在 golang 中实现抽象类。</p><h4 id="golang-中实现抽象类的方式"><a href="#golang-中实现抽象类的方式" class="headerlink" title="golang 中实现抽象类的方式"></a>golang 中实现抽象类的方式</h4><ul><li>定义 interface</li></ul><p>首先，我们需要将抽象方法定义在 interface 中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IGame <span class="keyword">interface</span> &#123;</span><br><span class="line">    Name() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义”父类”</li></ul><p>然后，我们需要使用 struct 实现公共方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Game <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Game)</span> <span class="title">play</span><span class="params">(game IGame)</span></span> &#123;</span><br><span class="line">    fmt.Printf(fmt.Sprintf(<span class="string">&quot;%s is awesome!&quot;</span>, game.Name()))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是重点，我们将 <code>game IGame</code> 传了进来。这样我们便可以调用”子类”的方法来获取名字。<strong>从而间接地实现了在公共方法中调用不同”子类”的实现的抽象方法。</strong></p><ul><li>定义”子类”</li></ul><p>接着，我们再定义”Dota”和”LOL”这 2 个 struct 即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Dota <span class="keyword">struct</span> &#123;</span><br><span class="line">    Game</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dota)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Dota&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LOL <span class="keyword">struct</span> &#123;</span><br><span class="line">    Game</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LOL)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;LOL&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>大功告成</li></ul><p>现在，在初始化”Dota”和”LOL”结构体后，便可以调用 <code>func (g *Game) play(game IGame)</code> 方法了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dota := &amp;Dota&#123;&#125;</span><br><span class="line">dota.play(dota)</span><br><span class="line"></span><br><span class="line">lol := &amp;LOL&#123;&#125;</span><br><span class="line">lol.play(lol)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">//Dota is awesome!</span></span><br><span class="line"><span class="comment">//LOL is awesome!</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文通过 struct 和 interface 的组合，提供了一种思路，间接实现了面向对象语言中的抽象类继承的模式。旨在提供一种思路，希望能帮助到需要的同学，欢迎讨论 :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍了一种通过 struct 和 interface 来在 golang 中实现抽象类的方式。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 Java 这种面向对象
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Golang疑问 Use of new vs var in Go</title>
    <link href="https://richard-xiong.github.io/2020/10/13/Golang%E7%96%91%E9%97%AE-Use-of-new-vs-var-in-Go/"/>
    <id>https://richard-xiong.github.io/2020/10/13/Golang%E7%96%91%E9%97%AE-Use-of-new-vs-var-in-Go/</id>
    <published>2020-10-12T20:58:57.000Z</published>
    <updated>2020-10-12T13:36:35.679Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Q： Is there any difference between:</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b bar</span><br><span class="line">foo(&amp;b)</span><br></pre></td></tr></table></figure><p>and</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b := <span class="built_in">new</span>(bar)</span><br><span class="line">foo(b)</span><br></pre></td></tr></table></figure><p>The use of new creates an allocation.</p><p><strong>A： No, there is no difference, as, contrary to C, Go explicitly states that you can give a pointer to a locally created variable.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Q： Is there any difference between:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang设计模式之单例模式</title>
    <link href="https://richard-xiong.github.io/2020/10/13/golang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://richard-xiong.github.io/2020/10/13/golang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-10-12T20:42:48.000Z</published>
    <updated>2020-10-12T12:56:57.370Z</updated>
    
    <content type="html"><![CDATA[<p>在过去的几年中，Go语言的发展是惊人的，并且吸引了很多由其他语言（Python、PHP、Ruby）转向Go语言的跨语言学习者。 Go语言太容易实现并发了，以至于它在很多地方被不正确的使用了。</p><h2 id="Go语言中的单例模式"><a href="#Go语言中的单例模式" class="headerlink" title="Go语言中的单例模式"></a>Go语言中的单例模式</h2><p>在过去的几年中，Go语言的发展是惊人的，并且吸引了很多由其他语言（Python、PHP、Ruby）转向Go语言的跨语言学习者。</p><p>在过去的很长时间里，很多开发人员和初创公司都习惯使用Python、PHP或Ruby快速开发功能强大的系统，并且大多数情况下都不需要担心内部事务如何工作，也不需要担心线程安全性和并发性。直到最近几年，多线程高并发的系统开始流行起来，我们现在不仅需要快速开发功能强大的系统，而且还要保证被开发的系统能够足够快速运行。（我们真是太难了☺️）</p><p>对于被Go语言天生支持并发的特性吸引来的跨语言学习者来说，我觉着掌握Go语言的语法并不是最难的，最难的是突破既有的思维定势，真正理解并发和使用并发来解决实际问题。</p><p>Go语言太容易实现并发了，以至于它在很多地方被不正确的使用了。</p><h3 id="常见的错误"><a href="#常见的错误" class="headerlink" title="常见的错误"></a>常见的错误</h3><p>有一些错误是很常见的，比如不考虑并发安全的单例模式。就像下面的示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> singleton <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance *singleton</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span> *<span class="title">singleton</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> instance == <span class="literal">nil</span> &#123;</span><br><span class="line">        instance = &amp;singleton&#123;&#125;   <span class="comment">// 不是并发安全的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述情况下，多个goroutine可以执行第一个检查，并且它们都将创建该<code>singleton</code>类型的实例并相互覆盖。无法保证它将在此处返回哪个实例，并且对该实例的其他进一步操作可能与开发人员的期望不一致。</p><p>不好的原因是，如果有代码保留了对该单例实例的引用，则可能存在具有不同状态的该类型的多个实例，从而产生潜在的不同代码行为。这也成为调试过程中的一个噩梦，并且很难发现该错误，因为在调试时，由于运行时暂停而没有出现任何错误，这使非并发安全执行的可能性降到了最低，并且很容易隐藏开发人员的问题。</p><h3 id="激进的加锁"><a href="#激进的加锁" class="headerlink" title="激进的加锁"></a>激进的加锁</h3><p>也有很多对这种并发安全问题的糟糕解决方案。使用下面的代码确实能解决并发安全问题，但会带来其他潜在的严重问题，通过加锁把对该函数的并发调用变成了串行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mu Sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span> *<span class="title">singleton</span></span> &#123;</span><br><span class="line">    mu.Lock()                    <span class="comment">// 如果实例存在没有必要加锁</span></span><br><span class="line">    <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> instance == <span class="literal">nil</span> &#123;</span><br><span class="line">        instance = &amp;singleton&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们可以看到在创建单例实例之前通过引入<code>Sync.Mutex</code>和获取Lock来解决并发安全问题。问题是我们在这里执行了过多的锁定，即使我们不需要这样做，在实例已经创建的情况下，我们应该简单地返回缓存的单例实例。在高度并发的代码基础上，这可能会产生瓶颈，因为一次只有一个goroutine可以获得单例实例。</p><p>因此，这不是最佳方法。我们必须考虑其他解决方案。</p><h3 id="Check-Lock-Check模式"><a href="#Check-Lock-Check模式" class="headerlink" title="Check-Lock-Check模式"></a>Check-Lock-Check模式</h3><p>在C ++和其他语言中，确保最小程度的锁定并且仍然是并发安全的最佳和最安全的方法是在获取锁定时利用众所周知的<code>Check-Lock-Check</code>模式。该模式的伪代码表示如下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> check() &#123;</span><br><span class="line">    lock() &#123;</span><br><span class="line">        <span class="keyword">if</span> check() &#123;</span><br><span class="line">            <span class="comment">// 在这里执行加锁安全的代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该模式背后的思想是，你应该首先进行检查，以最小化任何主动锁定，因为IF语句的开销要比加锁小。其次，我们希望等待并获取互斥锁，这样在同一时刻在那个块中只有一个执行。但是，在第一次检查和获取互斥锁之间，可能有其他goroutine获取了锁，因此，我们需要在锁的内部再次进行检查，以避免用另一个实例覆盖了实例。</p><p>如果将这种模式应用于我们的<code>GetInstance()</code>方法，我们会写出类似下面的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span> *<span class="title">singleton</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> instance == <span class="literal">nil</span> &#123;     <span class="comment">// 不太完美 因为这里不是完全原子的</span></span><br><span class="line">        mu.Lock()</span><br><span class="line">        <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> instance == <span class="literal">nil</span> &#123;</span><br><span class="line">            instance = &amp;singleton&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用<code>sync/atomic</code>这个包，我们可以原子化加载并设置一个标志，该标志表明我们是否已初始化实例。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> initialized <span class="keyword">uint32</span></span><br><span class="line">... <span class="comment">// 此处省略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span> *<span class="title">singleton</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> atomic.LoadUInt32(&amp;initialized) == <span class="number">1</span> &#123;  <span class="comment">// 原子操作 </span></span><br><span class="line">            <span class="keyword">return</span> instance</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> initialized == <span class="number">0</span> &#123;</span><br><span class="line">         instance = &amp;singleton&#123;&#125;</span><br><span class="line">         atomic.StoreUint32(&amp;initialized, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是……这看起来有点繁琐了，我们其实可以通过研究Go语言和标准库如何实现goroutine同步来做得更好。</p><h3 id="Go语言惯用的单例模式"><a href="#Go语言惯用的单例模式" class="headerlink" title="Go语言惯用的单例模式"></a>Go语言惯用的单例模式</h3><p>我们希望利用Go惯用的方式来实现这个单例模式。我们在标准库<code>sync</code>中找到了<code>Once</code>类型。它能保证某个操作仅且只执行一次。下面是来自Go标准库的源码（部分注释有删改）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Once is an object that will perform exactly one action.</span></span><br><span class="line"><span class="keyword">type</span> Once <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// done indicates whether the action has been performed.</span></span><br><span class="line">    <span class="comment">// It is first in the struct because it is used in the hot path.</span></span><br><span class="line">    <span class="comment">// The hot path is inlined at every call site.</span></span><br><span class="line">    <span class="comment">// Placing done first allows more compact instructions on some architectures (amd64/x86),</span></span><br><span class="line">    <span class="comment">// and fewer instructions (to calculate offset) on other architectures.</span></span><br><span class="line">    done <span class="keyword">uint32</span></span><br><span class="line">    m    Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span> <span class="title">Do</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> atomic.LoadUint32(&amp;o.done) == <span class="number">0</span> &#123; <span class="comment">// check</span></span><br><span class="line">        <span class="comment">// Outlined slow-path to allow inlining of the fast-path.</span></span><br><span class="line">        o.doSlow(f)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span> <span class="title">doSlow</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">    o.m.Lock()                          <span class="comment">// lock</span></span><br><span class="line">    <span class="keyword">defer</span> o.m.Unlock()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> o.done == <span class="number">0</span> &#123;                    <span class="comment">// check</span></span><br><span class="line">        <span class="keyword">defer</span> atomic.StoreUint32(&amp;o.done, <span class="number">1</span>)</span><br><span class="line">        f()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这说明我们可以借助这个实现只执行一次某个函数/方法，<code>once.Do()</code>的用法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 在这里执行安全的初始化</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>下面就是单例实现的完整代码，该实现利用<code>sync.Once</code>类型去同步对<code>GetInstance()</code>的访问，并确保我们的类型仅被初始化一次。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> singleton <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance *singleton</span><br><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span> *<span class="title">singleton</span></span> &#123;</span><br><span class="line">    once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        instance = &amp;singleton&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，使用<code>sync.Once</code>包是安全地实现此目标的首选方式，类似于Objective-C和Swift（Cocoa）实现<code>dispatch_once</code>方法来执行类似的初始化。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>当涉及到并发和并行代码时，需要对代码进行更仔细的检查。始终让你的团队成员执行代码审查，因为这样的事情很容易就会被发现。</p><p>所有刚转到Go语言的新开发人员都必须真正了解并发安全性如何工作以更好地改进其代码。即使Go语言本身通过允许你在对并发性知识知之甚少的情况下设计并发代码，也完成了许多繁重的工作。在某些情况下，单纯的依靠语言特性也无能为力，你仍然需要在开发代码时应用最佳实践。</p><p>翻译自<a href="http://marcio.io/2015/07/singleton-pattern-in-go/%EF%BC%8C%E8%80%83%E8%99%91%E5%88%B0%E5%8F%AF%E8%AF%BB%E6%80%A7%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9%E6%9C%89%E4%BF%AE%E6%94%B9%E3%80%82">http://marcio.io/2015/07/singleton-pattern-in-go/，考虑到可读性部分内容有修改。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在过去的几年中，Go语言的发展是惊人的，并且吸引了很多由其他语言（Python、PHP、Ruby）转向Go语言的跨语言学习者。 Go语言太容易实现并发了，以至于它在很多地方被不正确的使用了。&lt;/p&gt;
&lt;h2 id=&quot;Go语言中的单例模式&quot;&gt;&lt;a href=&quot;#Go语言中的单
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang技术准备</title>
    <link href="https://richard-xiong.github.io/2020/10/13/golang%E6%8A%80%E6%9C%AF%E5%87%86%E5%A4%87/"/>
    <id>https://richard-xiong.github.io/2020/10/13/golang%E6%8A%80%E6%9C%AF%E5%87%86%E5%A4%87/</id>
    <published>2020-10-12T16:36:37.000Z</published>
    <updated>2020-10-12T12:40:21.391Z</updated>
    
    <content type="html"><![CDATA[<p>golang技术准备</p><ol><li>数据结构与算法</li><li>设计模式  </li><li>golang基本知识&amp;底层实现原理</li><li>中间件 redis、mq、mysql、mangodb、memcache、dynamodb </li><li>线程和携程 </li><li>golang和java的对比</li><li>mysql分库分表 深入理解索引 二叉树 红黑树</li><li>docker&amp;k8s的使用  </li><li>CI/CD 的使用</li><li>gRPC&amp;go-kit&amp;goMicro的使用 </li><li>项目经验 </li><li>带团队经验</li></ol><p>1、设计模式 23种 预计23个小时</p><p>2、数据结构与算法 200道题 200个小时</p><p>3、golang基本知识&amp;底层实现原理 50个小时</p><p>​         <a href="https://tiancaiamao.gitbooks.io/go-internals/content/zh/06.2.html">https://tiancaiamao.gitbooks.io/go-internals/content/zh/06.2.html</a></p><p>​        <a href="https://mubu.com/doc/explore/23357">https://mubu.com/doc/explore/23357</a></p><p>​    <a href="https://mubu.com/doc/explore/23447">https://mubu.com/doc/explore/23447</a></p><p><a href="https://adolphlwq.xyz/blog/#/go/basics">https://adolphlwq.xyz/blog/#/go/basics</a></p><p><strong><a href="https://www.processon.com/view/link/5a9ba4c8e4b0a9d22eb3bdf0#map">https://www.processon.com/view/link/5a9ba4c8e4b0a9d22eb3bdf0#map</a></strong></p><ol start="4"><li>中间件 redis、mq、mysql、mangodb、memcache、dynamodb  20个小时</li><li>2个小时</li><li>1个小时</li><li>10个小时</li><li>5个小时</li></ol><p>预计300个小时 每天工作 2个小时 回家2个小时  预计75d  3个月</p><p>规划 </p><p>每天任务 </p><p>1个设计模式  </p><p>1个leetcode</p><p>1个go的底层知识</p><p>1 个 mysql或者redis原理</p><p>在过去的几年中，Go语言的发展是惊人的，并且吸引了很多由其他语言（Python、PHP、Ruby）转向Go语言的跨语言学习者。 Go语言太容易实现并发了，以至于它在很多地方被不正确的使用了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;golang技术准备&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据结构与算法&lt;/li&gt;
&lt;li&gt;设计模式  &lt;/li&gt;
&lt;li&gt;golang基本知识&amp;amp;底层实现原理&lt;/li&gt;
&lt;li&gt;中间件 redis、mq、mysql、mangodb、memcache、dynamodb &lt;/li
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang设计模式之工厂方法模式</title>
    <link href="https://richard-xiong.github.io/2020/10/13/golang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://richard-xiong.github.io/2020/10/13/golang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-10-12T16:29:10.000Z</published>
    <updated>2020-10-12T08:32:32.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang设计模式之工厂方法模式"><a href="#golang设计模式之工厂方法模式" class="headerlink" title="golang设计模式之工厂方法模式"></a>golang设计模式之工厂方法模式</h1><h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><blockquote><p>wiki: 工厂方法模式（英语：Factory method pattern）是一种实现了“工厂”概念的面向对象设计模式。就像其他创建型模式一样，它也是处理在不指定对象具体类型的情况下创建对象的问题。工厂方法模式的实质是“定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类。工厂方法让类的实例化推迟到子类中进行。”</p></blockquote><p>上面是 维基百科 中对工厂方法的定义，唯一的一个工厂控制着 所有产品的实例化，而 <code>工厂方法</code> 中包括一个工厂接口，我们可以动态的实现多种工厂，达到扩展的目的</p><ul><li>简单工厂需要:<ol><li>工厂结构体</li><li>产品接口</li><li>产品结构体</li></ol></li><li>工厂方法需要:<ol><li>工厂接口</li><li>工厂结构体</li><li>产品接口</li><li>产品结构体</li></ol></li></ul><p>在 <code>简单工厂</code> 中，依赖于唯一的工厂对象，如果我们需要实例化一个产品，那么就要向工厂中传入一个参数获取对应对象，如果要增加一种产品，就要在工厂中修改创建产品的函数，耦合性过高 ，而在 <code>工厂方法</code> 中，依赖工厂接口，我们可以通过实现工厂接口，创建多种工厂，将对象创建由一个对象负责所有具体类的实例化，变成由一群子类来负责对具体类的实例化，将过程解耦。</p><p>下面用代码实现：</p><p>例如，我们现在有一个产品需要被创建，那么先构建工厂接口和产品接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 工厂接口</span></span><br><span class="line"> <span class="keyword">type</span> FactoryInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">       CreateProduct(t <span class="keyword">string</span>) ProductInterface</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品接口</span></span><br><span class="line"><span class="keyword">type</span> ProductInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">    Intro()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后实现这两个接口: 工厂结构体和产品结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建工厂结构体并实现工厂接口</span></span><br><span class="line"><span class="keyword">type</span> Factory1 <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f Factory1)</span> <span class="title">CreateProduct</span><span class="params">(t <span class="keyword">string</span>)</span> <span class="title">ProductInterface</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> t &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;product1&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> Product1&#123;&#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建产品1并实现产品接口</span></span><br><span class="line"><span class="keyword">type</span> Product1 <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Product1)</span> <span class="title">Intro</span><span class="params">()</span></span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;this is product 1&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在使用的时候，就可以让子类来选择实例化哪种产品:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建工厂</span></span><br><span class="line">    f := <span class="built_in">new</span>(Factory1)</span><br><span class="line"></span><br><span class="line">    p := f.CreateProduct(<span class="string">&quot;product1&quot;</span>)</span><br><span class="line">    p.Intro()  <span class="comment">// output:  this is product 1.</span></span><br></pre></td></tr></table></figure><p>或许上面的代码看起来并不容易懂，因为我们只有一种产品，不能看出来它的好处，在网上我看到了一个卖包子的例子，我觉得很贴切，在这我就用go实现一下,辅助理解:</p><p>栗子: 我现在想在我的老家齐齐哈尔开一家包子店，卖猪肉馅和三鲜馅两种馅料的包子，那么我们使用简单工厂模式应该怎样实现呢？</p><ul><li><p>简单工厂模式实现:</p><ol><li><p>创建工厂结构体（包子店）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂类(包子店)</span></span><br><span class="line"><span class="keyword">type</span> BunShop <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建产品接口(包子类的接口)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Bun <span class="keyword">interface</span> &#123;</span><br><span class="line">    create()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现产品（2种包子）</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PigMeatBuns <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p PigMeatBuns)</span> <span class="title">create</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;猪肉馅包子&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> SamSunStuffingBuns <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SamSunStuffingBuns)</span> <span class="title">create</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;三鲜馅包子&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>为工厂添加生产包子的方法</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b BunShop)</span> <span class="title">Generate</span><span class="params">(t <span class="keyword">string</span>)</span> <span class="title">Bun</span></span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> t &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;pig&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> PigMeatBuns&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;3s&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> SamSunStuffingBuns&#123;&#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>这样一个简单工厂模式就完成了:</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">factory := <span class="built_in">new</span>(BunShop)</span><br><span class="line">b := factory.Generate(<span class="string">&quot;pig&quot;</span>)</span><br><span class="line">b.create() <span class="comment">// output: 猪肉馅包子</span></span><br></pre></td></tr></table></figure></li></ul><p>可是如果生意做的不错，我想要在广东开一家分店该怎么办呢？依旧是两种包子，但是为了符合当地人的口味，一定会有所差别，难道要一步一步的修改工厂类吗？</p><p>这样工厂方法模式就派上用场了…</p><ol><li><p>添加工厂接口(包子店的接口)和产品接口(包子接口)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BunShopInterface <span class="keyword">interface</span>&#123;</span><br><span class="line">   Generate(t <span class="keyword">string</span>) Bun</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">type</span> Bun <span class="keyword">interface</span> &#123;</span><br><span class="line">   create()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建工厂结构体和产品结构体（具体包子店和具体包子）</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> QSPigMeatBuns <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> GDPigMeatBuns <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> QSSamSunStuffingBuns <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> GDSamSunStuffingBuns <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现产品接口...  这里就不写了</span></span><br><span class="line"><span class="comment">// CODE ...</span></span><br></pre></td></tr></table></figure><ol><li>创建对应的工厂（齐市包子店和广东包子店）</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> QSBunShop <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GDBunShop <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(qs QSBunShop)</span> <span class="title">Generate</span><span class="params">(t <span class="keyword">string</span>)</span> <span class="title">Bun</span></span> &#123;</span><br><span class="line">   <span class="keyword">switch</span> t &#123;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&quot;pig&quot;</span>:</span><br><span class="line">         <span class="keyword">return</span> QSPigMeatBuns&#123;&#125;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&quot;3s&quot;</span>:</span><br><span class="line">         <span class="keyword">return</span> QSSamSunStuffingBuns&#123;&#125;</span><br><span class="line">       <span class="keyword">default</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(gd QSBunShop)</span> <span class="title">Generate</span><span class="params">(t <span class="keyword">string</span>)</span> <span class="title">Bun</span></span> &#123;</span><br><span class="line">     <span class="keyword">switch</span> t &#123;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&quot;pig&quot;</span>:</span><br><span class="line">         <span class="keyword">return</span> GDPigMeatBuns&#123;&#125;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&quot;3s&quot;</span>:</span><br><span class="line">         <span class="keyword">return</span> GDSamSunStuffingBuns&#123;&#125;</span><br><span class="line">       <span class="keyword">default</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>这样，就完成了工厂方法模式</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b Bun</span><br><span class="line"><span class="comment">// 卖呀卖呀卖包子...</span></span><br><span class="line">QSFactory := <span class="built_in">new</span>(QSBunShop)</span><br><span class="line">b = QSFactory.Generate(<span class="string">&quot;pig&quot;</span>)  <span class="comment">// 传入猪肉馅的参数，会返回齐市包子铺的猪肉馅包子</span></span><br><span class="line">b.create()</span><br><span class="line"></span><br><span class="line">GDFactory := <span class="built_in">new</span>(GDBunShop)</span><br><span class="line">b = GDFactory.Generate(<span class="string">&quot;pig&quot;</span>) <span class="comment">// 同样传入猪肉馅的参数，会返回广东包子铺的猪肉馅包子</span></span><br><span class="line">b.create()</span><br></pre></td></tr></table></figure><blockquote><p>go中没有继承，实际上可以以组合的方式达到继承的目的</p></blockquote><p>简单工厂模式和工厂方法模式看起来很相似，本质区别就在于，如果在包子店中直接创建包子产品，是依赖具体包子店的，扩展性、弹性、可维护性都较差，而如果将实例化的代码抽象出来，不再依赖具体包子店，而是依赖于抽象的包子接口，使对象的实现从使用中解耦，这样就拥有很强的扩展性了，也可以称为 『依赖倒置原则』</p><p>工厂方法模式的优缺点</p><ul><li>优点:<ol><li>符合“开闭”原则，具有很强的的扩展性、弹性和可维护性。修改时只需要添加对应的工厂类即可</li><li>使用了依赖倒置原则，依赖抽象而不是具体，使用（客户）和实现（具体类）松耦合</li><li>客户只需要知道所需产品的具体工厂，而无须知道具体工厂的创建产品的过程，甚至不需要知道具体产品的类名。</li></ol></li><li>缺点:<ol><li>每增加一个产品时，都需要一个具体类和一个具体创建者，使得类的个数成倍增加，导致系统类数目过多，复杂性增加</li><li>对简单工厂，增加功能修改的是工厂类；对工厂方法，增加功能修改的是产品类。</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;golang设计模式之工厂方法模式&quot;&gt;&lt;a href=&quot;#golang设计模式之工厂方法模式&quot; class=&quot;headerlink&quot; title=&quot;golang设计模式之工厂方法模式&quot;&gt;&lt;/a&gt;golang设计模式之工厂方法模式&lt;/h1&gt;&lt;h1 id=&quot;工厂方法模
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>自己学习gRPC(一)</title>
    <link href="https://richard-xiong.github.io/2020/09/25/%E8%87%AA%E5%B7%B1%E5%AD%A6%E4%B9%A0gRPC-%E4%B8%80/"/>
    <id>https://richard-xiong.github.io/2020/09/25/%E8%87%AA%E5%B7%B1%E5%AD%A6%E4%B9%A0gRPC-%E4%B8%80/</id>
    <published>2020-09-24T20:57:54.000Z</published>
    <updated>2020-09-24T14:52:25.462Z</updated>
    
    <content type="html"><![CDATA[<p>参照文档：</p><p><a href="https://developers.google.com/protocol-buffers/docs/gotutorial">https://developers.google.com/protocol-buffers/docs/gotutorial</a>  google接入protobuf官方文档</p><p><a href="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a>  protoc 的github二进制下载地址</p><h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><ol><li><h4 id="先安装protoc"><a href="#先安装protoc" class="headerlink" title="先安装protoc"></a>先安装protoc</h4></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd protoc-3.6.1-osx-x86_64</span><br><span class="line">cp -r include/ /usr/local/include/</span><br><span class="line">cp -r bin/ /usr/local/bin/</span><br></pre></td></tr></table></figure><p><strong>如果是mac 需要去系统偏好设置中授权</strong> </p><p>测试如果展示和下面证明安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mfxing  protoc</span><br><span class="line">Usage: protoc [OPTION] PROTO_FILES</span><br><span class="line">Parse PROTO_FILES and generate output based on the options given:</span><br><span class="line">  -IPATH, --proto_path=PATH   Specify the directory in which to search for</span><br><span class="line">                              imports.  May be specified multiple times;</span><br><span class="line">                              directories will be searched in order.  If not</span><br><span class="line">                              given, the current working directory is used.</span><br><span class="line">                              If not found in any of the these directories,</span><br><span class="line">                              the --descriptor_set_in descriptors will be</span><br><span class="line">                              checked for required proto file.</span><br><span class="line">  --version                   Show version info and exit.</span><br><span class="line">  ...</span><br><span class="line">    @&lt;filename&gt;                 Read options and filenames from file. If a</span><br><span class="line">                              relative file path is specified, the file</span><br><span class="line">                              will be searched in the working directory.</span><br><span class="line">                              The --proto_path option will not affect how</span><br><span class="line">                              this argument file is searched. Content of</span><br><span class="line">                              the file will be expanded in the position of</span><br><span class="line">                              @&lt;filename&gt; as in the argument list. Note</span><br><span class="line">                              that shell expansion is not applied to the</span><br><span class="line">                              content of the file (i.e., you cannot use</span><br><span class="line">                              quotes, wildcards, escapes, commands, etc.).</span><br><span class="line">                              Each line corresponds to a single argument,</span><br><span class="line">                              even if it contains spaces.</span><br></pre></td></tr></table></figure><ol start="2"><li><p>安装protoc-gen-go</p><ol><li><p>Install the protocol compiler plugin for Go (<code>protoc-gen-go</code>) using the following command:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> GO111MODULE=on  <span class="comment"># Enable module mode</span></span><br><span class="line">$ go get github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure></li><li><p>Update your <code>PATH</code> so that the <code>protoc</code> compiler can find the plugin:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:<span class="subst">$(go env GOPATH)</span>/bin&quot;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="Get-the-example-code"><a href="#Get-the-example-code" class="headerlink" title="Get the example code"></a>Get the example code</h3><p>The example code is part of the <a href="https://github.com/grpc/grpc-go">grpc-go</a> repo.</p><ol><li><p><a href="https://github.com/grpc/grpc-go/archive/v1.31.0.zip">Download the repo as a zip file</a> and unzip it, or clone the repo:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> -b v1.31.0 https://github.com/grpc/grpc-go</span><br></pre></td></tr></table></figure></li><li><p>Change to the quick start example directory:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> grpc-go/examples/helloworld</span><br></pre></td></tr></table></figure></li></ol><h3 id="Run-the-example"><a href="#Run-the-example" class="headerlink" title="Run the example"></a>Run the example</h3><p>From the <code>examples/helloworld</code> directory:</p><ol><li><p>Compile and execute the server code:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go run greeter_server/main.go</span><br></pre></td></tr></table></figure></li><li><p>From a different terminal, compile and execute the client code to see the client output:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run greeter_client/main.go</span><br><span class="line">Greeting: Hello world</span><br></pre></td></tr></table></figure></li></ol><p>Congratulations! You’ve just run a client-server application with gRPC.</p><h3 id="Update-a-gRPC-service"><a href="#Update-a-gRPC-service" class="headerlink" title="Update a gRPC service"></a>Update a gRPC service</h3><p>In this section you’ll update the application with an extra server method. The gRPC service is defined using <a href="https://developers.google.com/protocol-buffers">protocol buffers</a>. To learn more about how to define a service in a <code>.proto</code> file see <a href="https://grpc.io/docs/tutorials/basic/go">gRPC Basics: Go</a>. For now, all you need to know is that both the server and the client stub have a <code>SayHello()</code> RPC method that takes a <code>HelloRequest</code> parameter from the client and returns a <code>HelloReply</code> from the server, and that the method is defined like this:</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The greeting service definition.</span></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Sends a greeting</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> SayHello (HelloRequest) <span class="keyword">returns</span> (HelloReply) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The request message containing the user&#x27;s name.</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HelloRequest</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The response message containing the greetings</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HelloReply</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> <span class="class"><span class="keyword">message</span> = 1;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure><p>Open <code>helloworld/helloworld.proto</code> and add a new <code>SayHelloAgain()</code> method, with the same request and response types:</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The greeting service definition.</span></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Sends a greeting</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> SayHello (HelloRequest) <span class="keyword">returns</span> (HelloReply) </span>&#123;&#125;</span><br><span class="line">  <span class="comment">// Sends another greeting</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> SayHelloAgain (HelloRequest) <span class="keyword">returns</span> (HelloReply) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The request message containing the user&#x27;s name.</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HelloRequest</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The response message containing the greetings</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HelloReply</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> <span class="class"><span class="keyword">message</span> = 1;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure><p>Remember to save the file!</p><h3 id="Regenerate-gRPC-code"><a href="#Regenerate-gRPC-code" class="headerlink" title="Regenerate gRPC code"></a>Regenerate gRPC code</h3><p>Before you can use the new service method, you need to recompile the updated <code>.proto</code> file.</p><p>Note</p><p>We are in the process of transitioning to a <a href="https://github.com/grpc/grpc-go/pull/3453">new Go protoc plugin</a>. Until the transition is complete, you need to install <code>grpc-go/cmd/protoc-gen-go-grpc</code> manually (using the command shown below) before regenerating <code>.pb.go</code> files. To track progress on this issue, see <a href="https://github.com/grpc/grpc.io/issues/298">Update Go quick start #298</a>.</p><p>While still in the <code>examples/helloworld</code> directory, run the following commands:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ( <span class="built_in">cd</span> ../../cmd/protoc-gen-go-grpc &amp;&amp; go install . )</span><br><span class="line">$ protoc --go_out=. --go-grpc_out=. \</span><br><span class="line">    --go_opt=paths=source_relative \</span><br><span class="line">    --go-grpc_opt=paths=source_relative \</span><br><span class="line">    helloworld/helloworld.proto</span><br></pre></td></tr></table></figure><p>This will regenerate the <code>helloworld/helloworld.pb.go</code> and <code>helloworld/helloworld_grpc.pb.go</code> files, which contain:</p><ul><li>Code for populating, serializing, and retrieving <code>HelloRequest</code> and <code>HelloReply</code> message types.</li><li>Generated client and server code.</li></ul><h3 id="Update-and-run-the-application"><a href="#Update-and-run-the-application" class="headerlink" title="Update and run the application"></a>Update and run the application</h3><p>You have regenerated server and client code, but you still need to implement and call the new method in the human-written parts of the example application.</p><h4 id="Update-the-server"><a href="#Update-the-server" class="headerlink" title="Update the server"></a>Update the server</h4><p>Open <code>greeter_server/main.go</code> and add the following function to it:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span> <span class="title">SayHelloAgain</span><span class="params">(ctx context.Context, in *pb.HelloRequest)</span> <span class="params">(*pb.HelloReply, error)</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;pb.HelloReply&#123;Message: <span class="string">&quot;Hello again &quot;</span> + in.GetName()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Update-the-client"><a href="#Update-the-client" class="headerlink" title="Update the client"></a>Update the client</h4><p>Open <code>greeter_client/main.go</code> to add the following code to the end of the <code>main()</code> function body:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r, err = c.SayHelloAgain(ctx, &amp;pb.HelloRequest&#123;Name: name&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;could not greet: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;Greeting: %s&quot;</span>, r.GetMessage())</span><br></pre></td></tr></table></figure><p>Remember to save your changes.</p><h4 id="Run"><a href="#Run" class="headerlink" title="Run!"></a>Run!</h4><p>Run the client and server like you did before. Execute the following commands from the <code>examples/helloworld</code> directory:</p><ol><li><p>Run the server:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go run greeter_server/main.go</span><br></pre></td></tr></table></figure></li><li><p>From another terminal, run the client. This time, add a name as a command-line argument:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go run greeter_client/main.go Alice</span><br></pre></td></tr></table></figure><p>You’ll see the following output:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Greeting: Hello Alice</span><br><span class="line">Greeting: Hello again Alice</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参照文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/gotutorial&quot;&gt;https://developers.google.com/protocol-buffers/docs
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Go-kit 学习笔记-二十五-熔断器整合到我们的客户端代码中初步</title>
    <link href="https://richard-xiong.github.io/2020/09/25/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8D%81%E4%BA%94-%E7%86%94%E6%96%AD%E5%99%A8%E6%95%B4%E5%90%88%E5%88%B0%E6%88%91%E4%BB%AC%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%A3%E7%A0%81%E4%B8%AD%E5%88%9D%E6%AD%A5/"/>
    <id>https://richard-xiong.github.io/2020/09/25/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8D%81%E4%BA%94-%E7%86%94%E6%96%AD%E5%99%A8%E6%95%B4%E5%90%88%E5%88%B0%E6%88%91%E4%BB%AC%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%A3%E7%A0%81%E4%B8%AD%E5%88%9D%E6%AD%A5/</id>
    <published>2020-09-24T16:24:37.000Z</published>
    <updated>2020-09-24T12:57:06.584Z</updated>
    
    <content type="html"><![CDATA[<h3 id="熔断器整合到我们的客户端代码中初步"><a href="#熔断器整合到我们的客户端代码中初步" class="headerlink" title="熔断器整合到我们的客户端代码中初步"></a>熔断器整合到我们的客户端代码中初步</h3><p>熔断器的设计其实是放在客户端的如果有网关 apigateway 则可以放在网关中</p><img src="/images/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8D%81%E4%BA%94-%E7%86%94%E6%96%AD%E5%99%A8%E6%95%B4%E5%90%88%E5%88%B0%E6%88%91%E4%BB%AC%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%A3%E7%A0%81%E4%B8%AD%E5%88%9D%E6%AD%A5/image-20200924163333779.png" alt="image-20200924163333779" style="zoom:50%;" /><p>为了测试我们先把之前客户端的调用封装成一个getUser()的方法，返回结果和err</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    . <span class="string">&quot;Go-kit-studt-client/services&quot;</span></span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/go-kit/kit/endpoint&quot;</span></span><br><span class="line">    klog <span class="string">&quot;github.com/go-kit/kit/log&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/go-kit/kit/sd&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/go-kit/kit/sd/consul&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/go-kit/kit/sd/lb&quot;</span></span><br><span class="line">    httpTransport <span class="string">&quot;github.com/go-kit/kit/transport/http&quot;</span></span><br><span class="line">    consulapi <span class="string">&quot;github.com/hashicorp/consul/api&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;net/url&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUser</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 为了代码可读性和清晰性 我们使用代码块的方式</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 第一步：创建client</span></span><br><span class="line">        config := consulapi.DefaultConfig()</span><br><span class="line">        <span class="comment">// 设置consul 地址</span></span><br><span class="line">        config.Address = <span class="string">&quot;192.168.236.2:8500&quot;</span></span><br><span class="line">        <span class="comment">// 创建一个client 把我们的服务注册到consul上</span></span><br><span class="line">        apiClient, err := consulapi.NewClient(config)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        client := consul.NewClient(apiClient)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> logger klog.Logger</span><br><span class="line">        &#123;</span><br><span class="line">            logger = klog.NewLogfmtLogger(os.Stdout)</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            tags := []<span class="keyword">string</span>&#123;<span class="string">&quot;primary&quot;</span>, <span class="string">&quot;v1&quot;</span>&#125;</span><br><span class="line">            <span class="comment">// 可实时查询服务实例的状态信息</span></span><br><span class="line">            instancer := consul.NewInstancer(client, logger, <span class="string">&quot;userservice&quot;</span>, tags, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                f := <span class="function"><span class="keyword">func</span><span class="params">(serviceUrl <span class="keyword">string</span>)</span> <span class="params">(endpoint.Endpoint, io.Closer, error)</span></span> &#123;</span><br><span class="line">                    target, _ := url.Parse(<span class="string">&quot;http://&quot;</span> + serviceUrl) <span class="comment">//192.168.1.1:8080 服务器的真实地址</span></span><br><span class="line">                    <span class="keyword">return</span> httpTransport.NewClient(<span class="string">&quot;GET&quot;</span>, target, GetUserInfoRequest, GetUserInfoResponse).Endpoint(), <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">                &#125;</span><br><span class="line">                endpointer := sd.NewEndpointer(instancer, f, logger)</span><br><span class="line">                endpoints, err := endpointer.Endpoints()</span><br><span class="line">                <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">                &#125;</span><br><span class="line">                fmt.Println(<span class="string">&quot;服务有&quot;</span>, <span class="built_in">len</span>(endpoints), <span class="string">&quot;条&quot;</span>)</span><br><span class="line">                <span class="comment">// mylb := lb.NewRoundRobin(endpointer) // 轮询调用</span></span><br><span class="line">                mylb := lb.NewRandom(endpointer, time.Now().UnixNano())</span><br><span class="line">                <span class="keyword">for</span> &#123;</span><br><span class="line">                    <span class="comment">// getUserInfo:=endpoints[0] 写死获取第一个</span></span><br><span class="line">                    getUserInfo, err := mylb.Endpoint() <span class="comment">// 如果一个都没有的情况下 第二个参数为nil</span></span><br><span class="line">                    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">                    &#125;</span><br><span class="line">                    ctx := context.Background() <span class="comment">// 第三步：创建一个空的上下文对象</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 第四步：执行</span></span><br><span class="line">                    res, err := getUserInfo(ctx, UserRequest&#123;Uid: <span class="number">101</span>&#125;)</span><br><span class="line">                    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 将response进行类型断言</span></span><br><span class="line">                    userInfo := res.(UserResponse)</span><br><span class="line">                    fmt.Println(userInfo.Result)</span><br><span class="line">                    time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">                    <span class="keyword">return</span> userInfo.Result, <span class="literal">nil</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;熔断器整合到我们的客户端代码中初步&quot;&gt;&lt;a href=&quot;#熔断器整合到我们的客户端代码中初步&quot; class=&quot;headerlink&quot; title=&quot;熔断器整合到我们的客户端代码中初步&quot;&gt;&lt;/a&gt;熔断器整合到我们的客户端代码中初步&lt;/h3&gt;&lt;p&gt;熔断器的设计其实是放
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Go-kit 学习笔记-二十四-熔断器的三种状态、状态获取</title>
    <link href="https://richard-xiong.github.io/2020/09/24/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8D%81%E5%9B%9B-%E7%86%94%E6%96%AD%E5%99%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E7%8A%B6%E6%80%81%E3%80%81%E7%8A%B6%E6%80%81%E8%8E%B7%E5%8F%96/"/>
    <id>https://richard-xiong.github.io/2020/09/24/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8D%81%E5%9B%9B-%E7%86%94%E6%96%AD%E5%99%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E7%8A%B6%E6%80%81%E3%80%81%E7%8A%B6%E6%80%81%E8%8E%B7%E5%8F%96/</id>
    <published>2020-09-23T22:33:35.000Z</published>
    <updated>2020-09-24T08:18:48.039Z</updated>
    
    <content type="html"><![CDATA[<h3 id="熔断器的三种状态、状态获取"><a href="#熔断器的三种状态、状态获取" class="headerlink" title="熔断器的三种状态、状态获取"></a>熔断器的三种状态、状态获取</h3><p>熔断器有三种状态：</p><p>关闭：默认状态。如果请求次数异常超过设定比例，则打开熔断器</p><p>打开：当熔断器打开的时候。直接执行降级方法</p><p>半开: 定期的尝试发起请求来确认系统是否恢复了，如果恢复了，熔断器将转为关闭状态或者保持打开。</p><p>这三个状态的设置是通过ConfigureCommand种的sleepWIndow来设置的，默认是5s，他的含义是每隔5s会再重试一下 判断服务是否已经恢复，如果恢复就将状态关闭。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/afex/hystrix-go/hystrix&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id    <span class="keyword">int</span></span><br><span class="line">    Title <span class="keyword">string</span></span><br><span class="line">    Price <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getProduct</span><span class="params">()</span> <span class="params">(Product, error)</span></span> &#123;</span><br><span class="line">    r := rand.Intn(<span class="number">10</span>)</span><br><span class="line">    <span class="comment">//fmt.Println(r)</span></span><br><span class="line">    <span class="keyword">if</span> r &lt; <span class="number">5</span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Product&#123;</span><br><span class="line">        Id:    <span class="number">101</span>,</span><br><span class="line">        Title: <span class="string">&quot;Richard Go kit 笔记&quot;</span>,</span><br><span class="line">        Price: <span class="number">1</span>,</span><br><span class="line">    &#125;, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReProduct</span><span class="params">()</span> <span class="params">(Product, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Product&#123;Id: <span class="number">999</span>,</span><br><span class="line">        Title: <span class="string">&quot;推荐精品&quot;</span>,</span><br><span class="line">        Price: <span class="number">88</span>,</span><br><span class="line">    &#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    <span class="comment">//configA := hystrix.CommandConfig&#123;Timeout: 5000&#125;</span></span><br><span class="line">    <span class="comment">// 通过name 将configA配置到get_prod上</span></span><br><span class="line">    hystrix.ConfigureCommand(<span class="string">&quot;get_prod&quot;</span>, hystrix.CommandConfig&#123;</span><br><span class="line">        Timeout:                <span class="number">2000</span>,</span><br><span class="line">        MaxConcurrentRequests:  <span class="number">5</span>, <span class="comment">// 设置熔断器的最大并发数 如果超过就会降级</span></span><br><span class="line">        RequestVolumeThreshold: <span class="number">3</span>,</span><br><span class="line">        ErrorPercentThreshold:  <span class="number">20</span>,</span><br><span class="line">        SleepWindow:            <span class="keyword">int</span>(time.Second * <span class="number">5</span>), <span class="comment">// 状态重试时间改为100s 方便测试</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        c,_,_:=hystrix.GetCircuit(<span class="string">&quot;get_prod&quot;</span>) <span class="comment">// 第一个参数是熔断器实例 ，第二个标识是否取到，第三个是err</span></span><br><span class="line">        errs := hystrix.Do(<span class="string">&quot;get_prod&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">            p, _ := getProduct()</span><br><span class="line">            fmt.Println(p)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;, <span class="function"><span class="keyword">func</span><span class="params">(err error)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">            <span class="comment">// 打印降级错误的原因</span></span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                fmt.Println(err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// go 执行的错误 也能在这里接收到</span></span><br><span class="line">            fmt.Println(ReProduct())</span><br><span class="line">            rcp, err := ReProduct()</span><br><span class="line">            fmt.Println(rcp)</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> errs != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(errs)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印熔断器状态</span></span><br><span class="line">        fmt.Println(c.IsOpen())</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">mfxing  go run hystrix_demo.go </span><br><span class="line">hystrix: timeout</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">false</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">hystrix: timeout</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">false</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">false</span><br><span class="line">hystrix: circuit open</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">true</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">hystrix: circuit open</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">true</span><br><span class="line">hystrix: circuit open</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">true</span><br><span class="line">hystrix: circuit open</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">true</span><br><span class="line">hystrix: circuit open</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">true</span><br><span class="line">^Csignal: interrupt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 执行发现 一旦熔断器打开之后 打印就回快速很多了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;熔断器的三种状态、状态获取&quot;&gt;&lt;a href=&quot;#熔断器的三种状态、状态获取&quot; class=&quot;headerlink&quot; title=&quot;熔断器的三种状态、状态获取&quot;&gt;&lt;/a&gt;熔断器的三种状态、状态获取&lt;/h3&gt;&lt;p&gt;熔断器有三种状态：&lt;/p&gt;
&lt;p&gt;关闭：默认状态。如
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Go-kit 学习笔记-二十三-熔断器的打开与参数设置</title>
    <link href="https://richard-xiong.github.io/2020/09/24/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8D%81%E4%B8%89-%E7%86%94%E6%96%AD%E5%99%A8%E7%9A%84%E6%89%93%E5%BC%80%E4%B8%8E%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/"/>
    <id>https://richard-xiong.github.io/2020/09/24/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8D%81%E4%B8%89-%E7%86%94%E6%96%AD%E5%99%A8%E7%9A%84%E6%89%93%E5%BC%80%E4%B8%8E%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/</id>
    <published>2020-09-23T22:14:37.000Z</published>
    <updated>2020-09-24T03:02:27.060Z</updated>
    
    <content type="html"><![CDATA[<h3 id="熔断器的打开与参数设置"><a href="#熔断器的打开与参数设置" class="headerlink" title="熔断器的打开与参数设置"></a>熔断器的打开与参数设置</h3><h4 id="设置熔断器的参数"><a href="#设置熔断器的参数" class="headerlink" title="设置熔断器的参数"></a>设置熔断器的参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RequestVolumeThreshold:5,</span><br><span class="line"></span><br><span class="line">ErrorPercentThreshold:20,</span><br></pre></td></tr></table></figure><p><strong>RequestVolumeThreshold</strong>：默认是20，熔断器请求的阈值。意识是有20个请求才进行错误百分百计算</p><p><strong>ErrorPercentThreshold</strong>：就是百分比错误。默认是50（50%）</p><p>为了展示效果我们将代码改为同步调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/afex/hystrix-go/hystrix&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id    <span class="keyword">int</span></span><br><span class="line">    Title <span class="keyword">string</span></span><br><span class="line">    Price <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getProduct</span><span class="params">()</span> <span class="params">(Product, error)</span></span> &#123;</span><br><span class="line">    r := rand.Intn(<span class="number">10</span>)</span><br><span class="line">    <span class="comment">//fmt.Println(r)</span></span><br><span class="line">    <span class="keyword">if</span> r &lt; <span class="number">5</span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Product&#123;</span><br><span class="line">        Id:    <span class="number">101</span>,</span><br><span class="line">        Title: <span class="string">&quot;Richard Go kit 笔记&quot;</span>,</span><br><span class="line">        Price: <span class="number">1</span>,</span><br><span class="line">    &#125;, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReProduct</span><span class="params">()</span> <span class="params">(Product, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Product&#123;Id: <span class="number">999</span>,</span><br><span class="line">        Title: <span class="string">&quot;推荐精品&quot;</span>,</span><br><span class="line">        Price: <span class="number">88</span>,</span><br><span class="line">    &#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    <span class="comment">//configA := hystrix.CommandConfig&#123;Timeout: 5000&#125;</span></span><br><span class="line">    <span class="comment">// 通过name 将configA配置到get_prod上</span></span><br><span class="line">    hystrix.ConfigureCommand(<span class="string">&quot;get_prod&quot;</span>, hystrix.CommandConfig&#123;</span><br><span class="line">        Timeout:                <span class="number">2000</span>,</span><br><span class="line">        MaxConcurrentRequests:  <span class="number">5</span>, <span class="comment">// 设置熔断器的最大并发数 如果超过就会降级</span></span><br><span class="line">        RequestVolumeThreshold: <span class="number">3</span>,</span><br><span class="line">        ErrorPercentThreshold:  <span class="number">20</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++&#123;</span><br><span class="line"></span><br><span class="line">        errs := hystrix.Do(<span class="string">&quot;get_prod&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">            p, _ := getProduct()</span><br><span class="line">            fmt.Println(p)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;, <span class="function"><span class="keyword">func</span><span class="params">(err error)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">            <span class="comment">// 打印降级错误的原因</span></span><br><span class="line">            <span class="comment">//fmt.Println(err)</span></span><br><span class="line">            <span class="comment">// go 执行的错误 也能在这里接收到</span></span><br><span class="line">            fmt.Println(ReProduct())</span><br><span class="line">            rcp, err := ReProduct()</span><br><span class="line">            fmt.Println(rcp)</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        fmt.Println(errs)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">mfxing  go run hystrix_demo.go</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">&lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">&lt;nil&gt;</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">&lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">&lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">&lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">&lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">&lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">&lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">&lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 推荐精品 88&#125;</span><br><span class="line">&lt;nil&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以看出 前几次打印的比较慢 后几次打印的比较快，直接走的是降级方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;熔断器的打开与参数设置&quot;&gt;&lt;a href=&quot;#熔断器的打开与参数设置&quot; class=&quot;headerlink&quot; title=&quot;熔断器的打开与参数设置&quot;&gt;&lt;/a&gt;熔断器的打开与参数设置&lt;/h3&gt;&lt;h4 id=&quot;设置熔断器的参数&quot;&gt;&lt;a href=&quot;#设置熔断器的参数&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Go-kit 学习笔记-二十二-熔断器学习5控制最大并发数</title>
    <link href="https://richard-xiong.github.io/2020/09/24/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8D%81%E4%BA%8C-%E7%86%94%E6%96%AD%E5%99%A8%E5%AD%A6%E4%B9%A05%E6%8E%A7%E5%88%B6%E6%9C%80%E5%A4%A7%E5%B9%B6%E5%8F%91%E6%95%B0/"/>
    <id>https://richard-xiong.github.io/2020/09/24/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8D%81%E4%BA%8C-%E7%86%94%E6%96%AD%E5%99%A8%E5%AD%A6%E4%B9%A05%E6%8E%A7%E5%88%B6%E6%9C%80%E5%A4%A7%E5%B9%B6%E5%8F%91%E6%95%B0/</id>
    <published>2020-09-23T21:32:44.000Z</published>
    <updated>2020-09-23T14:15:14.056Z</updated>
    
    <content type="html"><![CDATA[<p>用户前端如果不断的请求我们api，除了我们使用限流功能我们也可以加入最大并发数，前面做的练习是对整个进行一个限流，那如果单个我们可以使用hystrix.go进行控制</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/afex/hystrix-go/hystrix&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id    <span class="keyword">int</span></span><br><span class="line">    Title <span class="keyword">string</span></span><br><span class="line">    Price <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getProduct</span><span class="params">()</span> <span class="params">(Product, error)</span></span> &#123;</span><br><span class="line">    r := rand.Intn(<span class="number">10</span>)</span><br><span class="line">    <span class="comment">//fmt.Println(r)</span></span><br><span class="line">    <span class="keyword">if</span> r &lt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="comment">//time.Sleep(time.Second * 3)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Product&#123;</span><br><span class="line">        Id:    <span class="number">101</span>,</span><br><span class="line">        Title: <span class="string">&quot;Richard Go kit 笔记&quot;</span>,</span><br><span class="line">        Price: <span class="number">1</span>,</span><br><span class="line">    &#125;, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReProduct</span><span class="params">()</span> <span class="params">(Product, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Product&#123;Id: <span class="number">999</span>,</span><br><span class="line">        Title: <span class="string">&quot;Richard Go kit 推荐精品&quot;</span>,</span><br><span class="line">        Price: <span class="number">88</span>,</span><br><span class="line">    &#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    <span class="comment">//configA := hystrix.CommandConfig&#123;Timeout: 5000&#125;</span></span><br><span class="line">    <span class="comment">// 通过name 将configA配置到get_prod上</span></span><br><span class="line">    hystrix.ConfigureCommand(<span class="string">&quot;get_prod&quot;</span>, hystrix.CommandConfig&#123;</span><br><span class="line">        Timeout:               <span class="number">2000</span>,</span><br><span class="line">        MaxConcurrentRequests: <span class="number">5</span>, <span class="comment">// 设置熔断器的最大并发数 如果超过就会降级</span></span><br><span class="line">    &#125;)</span><br><span class="line">    resultChan := <span class="built_in">make</span>(<span class="keyword">chan</span> Product, <span class="number">1</span>)</span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            wg.Add(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            errs := hystrix.Go(<span class="string">&quot;get_prod&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">                p, _ := getProduct()</span><br><span class="line">                resultChan &lt;- p</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">            &#125;, <span class="function"><span class="keyword">func</span><span class="params">(err error)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">                <span class="comment">// 打印降级错误的原因</span></span><br><span class="line">                fmt.Println(err)</span><br><span class="line">                <span class="comment">// go 执行的错误 也能在这里接收到</span></span><br><span class="line">                <span class="comment">//fmt.Println(ReProduct())</span></span><br><span class="line">                rcp, err := ReProduct()</span><br><span class="line">                resultChan &lt;- rcp</span><br><span class="line">                <span class="keyword">return</span> err</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> getProd := &lt;-resultChan:</span><br><span class="line">                fmt.Println(getProd)</span><br><span class="line">            <span class="keyword">case</span> err := &lt;-errs:</span><br><span class="line">                fmt.Println(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-执行代码"><a href="#测试-执行代码" class="headerlink" title="测试 执行代码"></a>测试 执行代码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mfxing  go run hystrix_demo.go</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">hystrix: max concurrency</span><br><span class="line">hystrix: max concurrency</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">&#123;999 Richard Go kit 推荐精品 88&#125;</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">&#123;999 Richard Go kit 推荐精品 88&#125;</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用户前端如果不断的请求我们api，除了我们使用限流功能我们也可以加入最大并发数，前面做的练习是对整个进行一个限流，那如果单个我们可以使用hystrix.go进行控制&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Go-kit 学习笔记-二十一-异步执行和服务降级</title>
    <link href="https://richard-xiong.github.io/2020/09/23/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8D%81%E4%B8%80-%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C%E5%92%8C%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/"/>
    <id>https://richard-xiong.github.io/2020/09/23/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8D%81%E4%B8%80-%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C%E5%92%8C%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/</id>
    <published>2020-09-22T21:26:59.000Z</published>
    <updated>2020-09-23T13:33:39.194Z</updated>
    
    <content type="html"><![CDATA[<h3 id="异步执行和服务降级"><a href="#异步执行和服务降级" class="headerlink" title="异步执行和服务降级"></a>异步执行和服务降级</h3><p>异步执行主要是使用的hystrix.go方法 参数和.do()是一样的，唯一的区别是前者是异步返回的err chan 后者是同步的返回的是error struct</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/afex/hystrix-go/hystrix&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id    <span class="keyword">int</span></span><br><span class="line">    Title <span class="keyword">string</span></span><br><span class="line">    Price <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getProduct</span><span class="params">()</span> <span class="params">(Product, error)</span></span> &#123;</span><br><span class="line">    r := rand.Intn(<span class="number">10</span>)</span><br><span class="line">    fmt.Println(r)</span><br><span class="line">    <span class="keyword">if</span> r &lt; <span class="number">5</span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Product&#123;</span><br><span class="line">        Id:    <span class="number">101</span>,</span><br><span class="line">        Title: <span class="string">&quot;Richard Go kit 笔记&quot;</span>,</span><br><span class="line">        Price: <span class="number">1</span>,</span><br><span class="line">    &#125;, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReProduct</span><span class="params">()</span> <span class="params">(Product, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Product&#123;Id: <span class="number">999</span>,</span><br><span class="line">        Title: <span class="string">&quot;Richard Go kit 推荐精品&quot;</span>,</span><br><span class="line">        Price: <span class="number">88</span>,</span><br><span class="line">    &#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    <span class="comment">//configA := hystrix.CommandConfig&#123;Timeout: 5000&#125;</span></span><br><span class="line">    <span class="comment">// 通过name 将configA配置到get_prod上</span></span><br><span class="line">    hystrix.ConfigureCommand(<span class="string">&quot;get_prod&quot;</span>, hystrix.CommandConfig&#123;</span><br><span class="line">        Timeout: <span class="number">2000</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    resultChan :=<span class="built_in">make</span>(<span class="keyword">chan</span> Product,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        errs := hystrix.Go(<span class="string">&quot;get_prod&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">            p, _ := getProduct()</span><br><span class="line">            fmt.Println(p)</span><br><span class="line">            resultChan &lt;-p</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;, <span class="function"><span class="keyword">func</span><span class="params">(err error)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">            fmt.Println(ReProduct())</span><br><span class="line">            rcp,err:=ReProduct()</span><br><span class="line">            resultChan &lt;- rcp</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> getProd:=&lt;-resultChan:</span><br><span class="line">            fmt.Println(getProd)</span><br><span class="line">        <span class="keyword">case</span> err:=&lt;-errs:</span><br><span class="line">            fmt.Println(err)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mfxing  go run hystrix_demo.go</span><br><span class="line">8</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">5</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">0</span><br><span class="line">&#123;999 Richard Go kit 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">&#123;999 Richard Go kit 推荐精品 88&#125;</span><br><span class="line">6</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">0</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">0</span><br><span class="line">^Csignal: interrupt</span><br></pre></td></tr></table></figure><p>更改下代码查看下如果降级方法执行失败了呢</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">errs := hystrix.Go(&quot;get_prod&quot;, func() error &#123;</span><br><span class="line">            p, _ := getProduct()</span><br><span class="line">            fmt.Println(p)</span><br><span class="line">            resultChan &lt;-p</span><br><span class="line">            return nil</span><br><span class="line">        &#125;, func(err error) error &#123;</span><br><span class="line">            // go 执行的错误 也能在这里接收到</span><br><span class="line">            //fmt.Println(ReProduct())</span><br><span class="line">            //rcp,err:=ReProduct()</span><br><span class="line">            //resultChan &lt;- rcp</span><br><span class="line">            // todo 如果降级方法都失败了？查看下情况回是什么样</span><br><span class="line">            return errors.New(&quot;降级方法错误&quot;)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>重新执行代码 差看一下结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mfxing  go run hystrix_demo.go</span><br><span class="line">1</span><br><span class="line">fallback failed with &#x27;降级方法错误&#x27;. run error was &#x27;hystrix: timeout&#x27;</span><br><span class="line">6</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">4</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">1</span><br><span class="line">^Csignal: interrupt</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;异步执行和服务降级&quot;&gt;&lt;a href=&quot;#异步执行和服务降级&quot; class=&quot;headerlink&quot; title=&quot;异步执行和服务降级&quot;&gt;&lt;/a&gt;异步执行和服务降级&lt;/h3&gt;&lt;p&gt;异步执行主要是使用的hystrix.go方法 参数和.do()是一样的，唯一的区别是
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Go-kit 学习笔记-二十-熔断器学习3超时情况下的服务降级写法</title>
    <link href="https://richard-xiong.github.io/2020/09/23/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8D%81-%E7%86%94%E6%96%AD%E5%99%A8%E5%AD%A6%E4%B9%A03%E8%B6%85%E6%97%B6%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E5%86%99%E6%B3%95/"/>
    <id>https://richard-xiong.github.io/2020/09/23/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8D%81-%E7%86%94%E6%96%AD%E5%99%A8%E5%AD%A6%E4%B9%A03%E8%B6%85%E6%97%B6%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E5%86%99%E6%B3%95/</id>
    <published>2020-09-22T20:43:14.000Z</published>
    <updated>2020-09-23T02:56:01.666Z</updated>
    
    <content type="html"><![CDATA[<h3 id="熔断器"><a href="#熔断器" class="headerlink" title="熔断器-"></a>熔断器-</h3><p>我们把需求确定下：</p><p>假设老板规定：一旦商品获取超时，择我们返回一个推荐商品（很大可能就是一个静态数据）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReProduct</span><span class="params">()</span> <span class="params">(Product, error)</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> Product&#123;Id: <span class="number">999</span>,</span><br><span class="line">      Title: <span class="string">&quot;Richard Go kit 推荐精品&quot;</span>,</span><br><span class="line">      Price: <span class="number">88</span>,</span><br><span class="line">   &#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    <span class="comment">//configA := hystrix.CommandConfig&#123;Timeout: 5000&#125;</span></span><br><span class="line">    <span class="comment">// 通过name 将configA配置到get_prod上</span></span><br><span class="line">    hystrix.ConfigureCommand(<span class="string">&quot;get_prod&quot;</span>, hystrix.CommandConfig&#123;</span><br><span class="line">        Timeout: <span class="number">2000</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        err := hystrix.Do(<span class="string">&quot;get_prod&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">            p, _ := getProduct()</span><br><span class="line">            fmt.Println(p)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;, <span class="function"><span class="keyword">func</span><span class="params">(err error)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">      <span class="comment">// 定义下超时的调用方法</span></span><br><span class="line">            fmt.Println(ReProduct())</span><br><span class="line">            <span class="keyword">return</span> errors.New(<span class="string">&quot;my time out&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mfxing  go run hystrix_demo.go</span><br><span class="line">2</span><br><span class="line">&#123;999 Richard Go kit 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">fallback failed with &#x27;my time out&#x27;. run error was &#x27;hystrix: timeout&#x27;</span><br><span class="line">4</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">&#123;999 Richard Go kit 推荐精品 88&#125; &lt;nil&gt;</span><br><span class="line">fallback failed with &#x27;my time out&#x27;. run error was &#x27;hystrix: timeout&#x27;</span><br><span class="line">9</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">3</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">^Csignal: interrupt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;熔断器&quot;&gt;&lt;a href=&quot;#熔断器&quot; class=&quot;headerlink&quot; title=&quot;熔断器-&quot;&gt;&lt;/a&gt;熔断器-&lt;/h3&gt;&lt;p&gt;我们把需求确定下：&lt;/p&gt;
&lt;p&gt;假设老板规定：一旦商品获取超时，择我们返回一个推荐商品（很大可能就是一个静态数据）&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Go-kit 学习笔记-十九-熔断器学习2配置command、超时报错、设置最大超时时间</title>
    <link href="https://richard-xiong.github.io/2020/09/23/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8D%81%E4%B9%9D-%E7%86%94%E6%96%AD%E5%99%A8%E5%AD%A6%E4%B9%A02%E9%85%8D%E7%BD%AEcommand%E3%80%81%E8%B6%85%E6%97%B6%E6%8A%A5%E9%94%99%E3%80%81%E8%AE%BE%E7%BD%AE%E6%9C%80%E5%A4%A7%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4/"/>
    <id>https://richard-xiong.github.io/2020/09/23/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8D%81%E4%B9%9D-%E7%86%94%E6%96%AD%E5%99%A8%E5%AD%A6%E4%B9%A02%E9%85%8D%E7%BD%AEcommand%E3%80%81%E8%B6%85%E6%97%B6%E6%8A%A5%E9%94%99%E3%80%81%E8%AE%BE%E7%BD%AE%E6%9C%80%E5%A4%A7%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4/</id>
    <published>2020-09-22T18:06:14.000Z</published>
    <updated>2020-09-22T13:02:17.792Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/afex/hystrix-go">Hystrix-go的文档</a></p><h3 id="配置command、超时报错、设置最大超时时间"><a href="#配置command、超时报错、设置最大超时时间" class="headerlink" title="配置command、超时报错、设置最大超时时间"></a>配置command、超时报错、设置最大超时时间</h3><p>hystrix的本质是commond的模式，把每一个执行过程都封装成一个commond，然后委托hystrix去执行</p><p>修改下上节课的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/afex/hystrix-go/hystrix&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id <span class="keyword">int</span></span><br><span class="line">    Title <span class="keyword">string</span></span><br><span class="line">    Price <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getProduct</span><span class="params">()</span><span class="params">(Product,error)</span></span>&#123;</span><br><span class="line">    r:=rand.Intn(<span class="number">10</span>)</span><br><span class="line">    fmt.Println(r)</span><br><span class="line">    <span class="keyword">if</span> r&lt;<span class="number">8</span>&#123;</span><br><span class="line">        time.Sleep(time.Second*<span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  Product&#123;</span><br><span class="line">        Id: <span class="number">101</span>,</span><br><span class="line">        Title: <span class="string">&quot;Richard Go kit 笔记&quot;</span>,</span><br><span class="line">        Price: <span class="number">1</span>,</span><br><span class="line">    &#125;,<span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    configA:=hystrix.CommandConfig&#123;Timeout: <span class="number">5000</span>,&#125;</span><br><span class="line">  <span class="comment">// 通过name 将configA配置到get_prod上</span></span><br><span class="line">    hystrix.ConfigureCommand(<span class="string">&quot;get_prod&quot;</span>,configA)</span><br><span class="line">    <span class="keyword">for</span>  &#123;</span><br><span class="line">        err:=hystrix.Do(<span class="string">&quot;get_prod&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">            p,_:=getProduct()</span><br><span class="line">            fmt.Println(p)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;,<span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">if</span> err !=<span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mfxing  go run hystrix_demo.go</span><br><span class="line">3</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">1</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">9</span><br><span class="line">&#123;101 Richard Go kit 笔记 1&#125;</span><br><span class="line">4</span><br><span class="line">^Csignal: interrupt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/afex/hystrix-go&quot;&gt;Hystrix-go的文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置command、超时报错、设置最大超时时间&quot;&gt;&lt;a href=&quot;#配置command、超时报错、设置最大超时时间&quot; cl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Go-kit 学习笔记-十八-服务容错、熔断器入门</title>
    <link href="https://richard-xiong.github.io/2020/09/20/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8D%81%E5%85%AB-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E3%80%81%E7%86%94%E6%96%AD%E5%99%A8%E5%85%A5%E9%97%A8/"/>
    <id>https://richard-xiong.github.io/2020/09/20/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8D%81%E5%85%AB-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E3%80%81%E7%86%94%E6%96%AD%E5%99%A8%E5%85%A5%E9%97%A8/</id>
    <published>2020-09-19T18:07:12.000Z</published>
    <updated>2020-09-22T10:10:30.681Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务容错、熔断器入门"><a href="#服务容错、熔断器入门" class="headerlink" title="服务容错、熔断器入门"></a>服务容错、熔断器入门</h3><p>第三方库： <a href="https://github.com/afex/hystrix-go">https://github.com/afex/hystrix-go</a></p><p>本质是：隔离远程服务，防止级联故障发生</p><p>同款的项目：netflix同名java项目： <a href="https://github.com/Netflix/Hystrix">https://github.com/Netflix/Hystrix</a></p><p>安装 go get github.com/afex/hystrix-go</p><p><img src="/images/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8D%81%E5%85%AB-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E3%80%81%E7%86%94%E6%96%AD%E5%99%A8%E5%85%A5%E9%97%A8/image-20200919182206067.png" alt="image-20200919182206067"></p><h4 id="随机延迟3s"><a href="#随机延迟3s" class="headerlink" title="随机延迟3s"></a>随机延迟3s</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id <span class="keyword">int</span></span><br><span class="line">    Title <span class="keyword">string</span></span><br><span class="line">    Price <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getProduct</span><span class="params">()</span><span class="params">(Product,error)</span></span>&#123;</span><br><span class="line">    r:=rand.Intn(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> r&lt;<span class="number">6</span>&#123;</span><br><span class="line">        fmt.Println(r)</span><br><span class="line">        time.Sleep(<span class="number">3</span>*time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  Product&#123;</span><br><span class="line">        Id: <span class="number">101</span>,</span><br><span class="line">        Title: <span class="string">&quot;Richard Go kit 笔记&quot;</span>,</span><br><span class="line">        Price: <span class="number">1</span>,</span><br><span class="line">    &#125;,<span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    <span class="keyword">for</span>  &#123;</span><br><span class="line">        p,_:=getProduct() <span class="comment">// 这里随机延迟3s</span></span><br><span class="line">        fmt.Println(p)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;服务容错、熔断器入门&quot;&gt;&lt;a href=&quot;#服务容错、熔断器入门&quot; class=&quot;headerlink&quot; title=&quot;服务容错、熔断器入门&quot;&gt;&lt;/a&gt;服务容错、熔断器入门&lt;/h3&gt;&lt;p&gt;第三方库： &lt;a href=&quot;https://github.com/afex
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Go-kit 学习笔记-十七-统一异常处理设置自己的Error对象</title>
    <link href="https://richard-xiong.github.io/2020/09/20/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8D%81%E4%B8%83-%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84Error%E5%AF%B9%E8%B1%A1/"/>
    <id>https://richard-xiong.github.io/2020/09/20/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8D%81%E4%B8%83-%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84Error%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-09-19T16:47:31.000Z</published>
    <updated>2020-09-19T09:34:12.874Z</updated>
    
    <content type="html"><![CDATA[<h3 id="统一异常处理设置自己的Error对象"><a href="#统一异常处理设置自己的Error对象" class="headerlink" title="统一异常处理设置自己的Error对象"></a>统一异常处理设置自己的Error对象</h3><p>先看下error的定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The error built-in interface type is the conventional interface for</span></span><br><span class="line"><span class="comment">// representing an error condition, with the nil value representing no error.</span></span><br><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此我们可以看出只要声明一个struct 然后实现了Error方法 这个struct就是一个Error</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyError <span class="keyword">struct</span> &#123;</span><br><span class="line">    Code    <span class="keyword">int</span></span><br><span class="line">    Message <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMyError</span><span class="params">(code <span class="keyword">int</span>, messgae <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;MyError&#123;Code: code, Message: messgae&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> this.Message</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在 MyErrorEncoder 通过类型断言进行处理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MyErrorEncoder</span><span class="params">(_ context.Context, err error, w http.ResponseWriter)</span></span> &#123;</span><br><span class="line">    contentType, body := <span class="string">&quot;text/plain; charset=utf-8&quot;</span>, []<span class="keyword">byte</span>(err.Error())</span><br><span class="line">    w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, contentType)</span><br><span class="line">    <span class="keyword">if</span> myerr, ok := err.(*util.MyError); ok &#123; <span class="comment">// 类型断言一下</span></span><br><span class="line">        w.WriteHeader(myerr.Code)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        w.WriteHeader(<span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    _, _ = w.Write(body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改负载均衡返回的错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api 限流 的实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RateLimit</span><span class="params">(limiter *rate.Limiter)</span> <span class="title">endpoint</span>.<span class="title">Middleware</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(next endpoint.Endpoint)</span> <span class="title">endpoint</span>.<span class="title">Endpoint</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, request <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(response <span class="keyword">interface</span>&#123;&#125;, err error)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> limiter.Allow() &#123;</span><br><span class="line">                <span class="keyword">return</span> next(ctx, request)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//return nil, errors.New(&quot;too many requests&quot;)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, util.NewMyError(<span class="number">429</span>,<span class="string">&quot;too many request&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>​    启动程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> run main.<span class="keyword">go</span> --name=userservice -port=<span class="number">8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/images/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8D%81%E4%B8%83-%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84Error%E5%AF%B9%E8%B1%A1/image-20200919172145389.png" alt="image-20200919172145389" style="zoom:50%;" />]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;统一异常处理设置自己的Error对象&quot;&gt;&lt;a href=&quot;#统一异常处理设置自己的Error对象&quot; class=&quot;headerlink&quot; title=&quot;统一异常处理设置自己的Error对象&quot;&gt;&lt;/a&gt;统一异常处理设置自己的Error对象&lt;/h3&gt;&lt;p&gt;先看下err
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Go-kit 学习笔记-十六-统一异常处理上编写自定义处理函数</title>
    <link href="https://richard-xiong.github.io/2020/09/19/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8D%81%E5%85%AD-%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8A%E7%BC%96%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/"/>
    <id>https://richard-xiong.github.io/2020/09/19/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8D%81%E5%85%AD-%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8A%E7%BC%96%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</id>
    <published>2020-09-19T14:49:31.000Z</published>
    <updated>2020-09-19T08:46:18.715Z</updated>
    
    <content type="html"><![CDATA[<h3 id="统一异常处理上编写自定义处理函数"><a href="#统一异常处理上编写自定义处理函数" class="headerlink" title="统一异常处理上编写自定义处理函数"></a>统一异常处理上编写自定义处理函数</h3><h5 id="自定义函数应该再哪里去调用"><a href="#自定义函数应该再哪里去调用" class="headerlink" title="自定义函数应该再哪里去调用"></a>自定义函数应该再哪里去调用</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serverHandler := httpTransport.NewServer(endP, Services.DecodeUserRequest, Services.EncodeUserRequest)</span><br></pre></td></tr></table></figure><p>第一个参数是endpoint 第二个参数是requestdecoder ，第三个是response encode，其实还有第四个参数，options切片</p><p>我们可以使用httpTransport.ServerOption 来创建一个options切</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">options:=[]httpTransport.ServerOption&#123;</span><br><span class="line">        httpTransport.ServerErrorEncoder(ErrorEncoder), </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>根据doc 我们可以看到ServerErrorEncoder 里面需要传入的是ErrorEncoder，在go-kit中server有实现好的json和默认encoder</p><img src="/images/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8D%81%E5%85%AD-%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8A%E7%BC%96%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/image-20200919162945035.png" alt="image-20200919162945035" style="zoom: 50%;" /><p>我们仿照defaultErrorEncode方法 实现一个</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MyErrorEncoder</span><span class="params">(_ context.Context, err error, w http.ResponseWriter)</span></span> &#123;</span><br><span class="line">    contentType, body := <span class="string">&quot;text/plain; charset=utf-8&quot;</span>, []<span class="keyword">byte</span>(err.Error())</span><br><span class="line">    w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, contentType)</span><br><span class="line">    w.WriteHeader(<span class="number">901</span>)</span><br><span class="line">    w.Write(body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在main.go 方法中调用 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用自定义错误方法</span></span><br><span class="line">options:=[]httpTransport.ServerOption&#123;</span><br><span class="line">    httpTransport.ServerErrorEncoder(Services.MyErrorEncoder),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">serverHandler := httpTransport.NewServer(endP, Services.DecodeUserRequest, Services.EncodeUserRequest,options...)</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>多次请求/user/123接口会返回901的错误</p><p><img src="/images/Go-kit-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8D%81%E5%85%AD-%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8A%E7%BC%96%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/image-20200919163429208.png" alt="image-20200919163429208"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;统一异常处理上编写自定义处理函数&quot;&gt;&lt;a href=&quot;#统一异常处理上编写自定义处理函数&quot; class=&quot;headerlink&quot; title=&quot;统一异常处理上编写自定义处理函数&quot;&gt;&lt;/a&gt;统一异常处理上编写自定义处理函数&lt;/h3&gt;&lt;h5 id=&quot;自定义函数应该再哪
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
